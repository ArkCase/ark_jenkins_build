#!/bin/bash
__OLD_BASH_OPTIONS__="$(set +o)"
set -eou pipefail

. /.functions

set_as_boolean DEBUG

LATEST="latest"
CONFIG=".configure"
IGNORE=".ignore"

# This one is NOT configurable to leverage the tools baked into the image
TOOL_DIR="/tools"

set_as_boolean DISABLE_COW

#
# All these others, however, are configurable
#
set_or_default NO_COW_MARKER ".no-cow"
set_or_default CACHE_DIR "/cache"
export CACHE_DIR

set_or_default CONF_DIR "/conf.d"

set_or_default INIT_DIR "/init.d"

GLOBAL_OUTPUT=()

set_as_boolean SILENT

cleanup()
{
	for l in "${GLOBAL_OUTPUT[@]}" ; do
		echo "${l}"
	done
	# This is only done to clean up the value of ${OLDPWD}
	cd .
}

say()
{
	local OUT="$(echo -ne "$(timestamp): ${@}")"
	if ${SILENT} ; then
		GLOBAL_OUTPUT+=("${OUT}")
	else
		echo "${OUT}"
	fi
}

list_versions()
{
	local TOOL="${1}"

	# There will be symlinks for major, major-minor, etc... so one doesn't have to enter
	# the full version, as well as "latest" ...
	find -L "${TOOL}" -mindepth 1 -maxdepth 1 -type d | \
		sed -e 's;/$;;g' -e 's;^.*/;;g' | \
		grep -v "${LATEST}" | \
		sort -V | while read v ; do
		[ -e "${TOOL}/${v}/${IGNORE}" ] && continue
		echo "${v}"
	done
}

configure_tools()
{
	# Choose the right tool per environment
	local ERRORS=()
	local PATHS=()
	local OUT=()
	local DEFAULTED="false"
	while read tool ; do
		DEFAULTED="false"

		# Skip non-directories
		[ -d "${tool}" ] || continue

		# The variable name will be the tool directory's basename
		TOOL="${tool##*/}"

		# Tool names are homogenized to upper case since this is the name of the config variable
		TOOL="${TOOL^^}"
		# Swap out dashes for underscores
		TOOL="${TOOL/-/_}"
		VER="${!TOOL:-""}"

		# If no version is given for the tool, then we use the ${LATEST} marker
		if [ -z "${VER}" ] ; then
			VER="${LATEST}"
			DEFAULTED="true"
		fi

		# Versions are homogenized to lowercase to avoid case issues (is this proper?)
		VER="${VER,,}"

		# If the tool is not meant to be enabled, we simply skip it
		[ "${VER}" == "off" ] && continue

		# If the tool is disabled, we simply skip it
		[ -e "${tool}/${IGNORE}" ] && continue

		# Find the available versions
		readarray -t AVAILABLE < <(list_versions "${tool}")

		# If there are no tools in there
		if [ "${#AVAILABLE[@]}" -lt 1 ] ; then

			# If we weren't explicitly asked for a tool that has no versions
			# available, we simply skip it. Otherwise, it's an error we can't
			# move past
			${DEFAULTED} || ERRORS+=("There are no versions of ${TOOL} available")

			# Regardless, we're moving on to the next tool
			continue
		fi

		local TOOL_VERSION="${tool}/${VER}"
		# If there's no "latest" link, we choose the last version in the array
		[ "${VER}" == "${LATEST}" ] && [ ! -d "${TOOL_VERSION}" ] && VER="${AVAILABLE[-1]}"

		# If the variable is set, then ${tool}/${VER} must exist and be a folder (or link to one)
		if [ ! -d "${TOOL_VERSION}" ] ; then
			# Version does not exist ... EXPLODE!!
			ERRORS+=("There is no version [${VER}] for ${TOOL} - only these versions are available: ${AVAILABLE[@]}")
			continue
		fi

		# The version directory exists, so use it

		# We use readlink -f to resolve the actual path for the tool before configuring it
		ACTUAL="$(readlink -f "${TOOL_VERSION}")"

		# This is the actual version we're using
		VER="${ACTUAL##*/}"

		# If the version is disabled, simply ignore it (this should be impossible, because
		# list_versions already accounted for this)
		[ -e "${ACTUAL}/${IGNORE}" ] && continue

		# If there's a bin directory within, we will add it to the system path (eventually)
		TOOL_BIN="${ACTUAL}/bin"
		[ -d "${TOOL_BIN}" ] && PATHS+=("${TOOL_BIN}")
		OUT+=("${TOOL}/${VER}/${TOOL_BIN:+bin}")
	done < <(find -L "${TOOL_DIR}" -mindepth 1 -maxdepth 1 -type d -not -name bin)

	if [ ${#ERRORS[@]} -ne 0 ] ; then
		for E in "${ERRORS[@]}" ; do
			err "${E}"
		done
		err "Configuration errors were found which prevented the image from starting up"
		return 1
	fi

	for O in "${OUT[@]}" ; do
		echo "${O}"
	done
	return 0
}

sanitize_path()
{
	local OLD_PATH="${@}"
	local NEW_PATH=""
	declare -A ENTRIES
	while read entry ; do
		[ -z "${entry}" ] && continue
		[ -n "${ENTRIES[${entry}]:-""}" ] && continue
		[ -n "${NEW_PATH}" ] && NEW_PATH+=":"
		NEW_PATH+="${entry}"
		ENTRIES[${entry}]="${entry}"
	done < <(echo -n "${OLD_PATH}" | tr ':' '\n')
	echo "${NEW_PATH}"
}

#
# This next section is meant to provide a means for builds to customize their own copies of the
# cache directories without affecting the parent versions. However, to make this happen,
# we have to employ COW functionality that's only available if the container is run in privileged
# mode, which is generally not very desirable. Once a decision has been reached to use this,
# this can be uncommented
#
is_mount_supported()
{
	local T="$(mktemp -d)"
	/usr/bin/sudo -n /usr/bin/mount -t tmpfs -o size=1M tmpfs "${T}" &>/dev/null
	local RET=${?}
	[ ${RET} -eq 0 ] && /usr/bin/sudo -n /usr/bin/umount "${T}" &>/dev/null
	rmdir "${T}" &>/dev/null
	return "${RET}"
}

trap cleanup EXIT

#
# Make sure we take ownership of our home directory, wherever it may be
#
if [ -v HOME ] ; then
	if [ -n "${HOME}" ] ; then
		#
		# If the home directory doesn't exist, create it!
		#
		if [ ! -d "${HOME}" ] ; then
			say "üè† The home directory for $(id -un) at [${HOME}] does not exist ... creating it!"
			/usr/bin/sudo -n /usr/bin/mkdir -p "${HOME}" || fail "Could not create the home directory [${HOME}]"
		fi

		(
			set -euo pipefail
			say "üö® Ensuring correct ownership and permissions for the home directory for $(id -un) at [${HOME}]..."
			say "üîí Setting ownership..."
			/usr/bin/sudo /usr/bin/chown -R "$(id -u):$(id -g)" "${HOME}" || fail "Failed to take ownership of the home directory at [${HOME}]"
			say "üõ°Ô∏è Setting permissions..."
			/usr/bin/chmod -R ug=rwX,o= "${HOME}" || fail "Failed to set the permissions for the home directory at [${HOME}]"
			ok "Home directory ownership and permissions set!"
		) || exit ${?}
	fi
fi

#
# If the cache directory doesn't exist, create it!
#
if [ ! -d "${CACHE_DIR}" ] ; then
	say "üíæ The cache directory [${CACHE_DIR}] does not exist ... creating it!"
	/usr/bin/sudo -n /usr/bin/mkdir -p "${CACHE_DIR}" || fail "Could not create the cache directory [${CACHE_DIR}]"
fi

#
# Make sure the cache is 100% accessible to us
#
(
	set -euo pipefail
	FIX="false"
	[ -r "${CACHE_DIR}" ] || FIX="true"
	[ -w "${CACHE_DIR}" ] || FIX="true"
	[ -x "${CACHE_DIR}" ] || FIX="true"
	"${FIX}" || exit 0
	say "üö® Ownership and permissions may be off for the cache at [${CACHE_DIR}], fixing them!"
	say "üîí Setting ownership..."
	/usr/bin/sudo -n /usr/bin/chown -R "$(id -u):$(id -g)" "${CACHE_DIR}" || fail "Could not set the ownership for the cache directory at [${CACHE_DIR}]"
	say "üõ°Ô∏è Setting permissions..."
	chmod -R ug=rwX,o= "${CACHE_DIR}" || fail "Could not set the permissions for the cache directory at [${CACHE_DIR}]"
	ok "Cache directory owner and permissions fixed!"
) || exit ${?}

#
# This is a sneaky, sneaky trick we're using to enable us to mount shared filesystems,
# but also avoid having them be modified directly by the containers, such that the
# containers can still make modifications, but other containers won't (shouldn't) see
# them until they're eventually propagated upwards to the source by some other means.
#
if ! "${DISABLE_COW}" && is_mount_supported ; then

	# The folders we want to support overlays for ...
	[ -v COW_MOUNTS ] || COW_MOUNTS=""
	IFS=":" read -a COW_MOUNTS <<< "${COW_MOUNTS}"
	COW_MOUNTS=("${CACHE_DIR}" "${COW_MOUNTS[@]}")

	say "‚öôÔ∏è Mount is supported, creating the COW mounts for: [${COW_MOUNTS[@]@Q}]"
	for MOUNTPOINT in "${COW_MOUNTS[@]}"; do
		MOUNTPOINT="$(readlink -f "${MOUNTPOINT}")"

		# First - does the mountpoint exist?
		if [ ! -d "${MOUNTPOINT}" ] ; then
			say "üö´ The mountpoint directory [${MOUNTPOINT}] does not exist ... will not create an overlay for it"
			continue
		fi

		# If it's marked as "no cow", skip it!
		[ -f "${MOUNTPOINT}/${NO_COW_MARKER}" ] && say "üö´ The mountpoint [${MOUNTPOINT}] has a ${NO_COW_MARKER} marker, so the COW infrastructure will not be set up for it" && continue

		# If it's already been processed, skip it
		WORK="${HOME}/.cows/work${MOUNTPOINT}"
		UPPER="${HOME}/.cows/upper${MOUNTPOINT}"
		if [ -d "${WORK}" ] || [ -d "${UPPER}" ] ; then
			say "üö´ There are already work and upper directories for the mountpoint [${MOUNTPOINT}] ... skipping it"
			continue
		fi

		# Is it already an overlay of some kind? Don't add another layer...
		if /usr/bin/sudo -n /usr/bin/findmnt -t overlay -J "${MOUNTPOINT}" &>/dev/null ; then
			say "üö´ The directory [${MOUNTPOINT}] seems to be an overlay, so will not mount another one on top"
			continue
		fi

		# Ok... we're good to go on the overlay attempt
		say "üíø Creating the overlay for [${MOUNTPOINT}]..."

		mkdir -p "${WORK}" || fail "Failed to create the work directory [${WORK}]"
		mkdir -p "${UPPER}" || fail "Failed to create the upper directory [${UPPER}]"

		# Mount the overlay using the above values
		/usr/bin/sudo -n /usr/bin/mount -t overlay overlay \
			-o lowerdir="${MOUNTPOINT}",upperdir="${UPPER}",workdir="${WORK}" \
			"${MOUNTPOINT}" || fail "Failed to mount the overlay for [${MOUNTPOINT}]"
		ok "Overlay ready!"
	done
fi

# Run the tool configurations
say "üõ†Ô∏è Configuring the tools"
CONFIGURED_TOOLS="$(configure_tools)"
[ ${?} -ne 0 ] && fail "Failed to configure tool versions"
readarray -t TOOLS < <(echo -n "${CONFIGURED_TOOLS}")
ok "Tools configured: [${TOOLS[@]@Q}]"

NEW_PATHS=()
TOOL_NAMES=()
TOOL_HOMES=()
TOOL_VERSIONS=()
for TOOL in "${TOOLS[@]}" ; do
	IFS="/" read tool version bin <<< "${TOOL}"

	TOOL_HOME="${TOOL_DIR}/${tool,,}/${version}"
	[ -n "${bin}" ] && NEW_PATHS+=("${TOOL_HOME}/${bin}")

	TOOL_NAMES+=("${tool}")
	TOOL_HOMES+=("${tool}_HOME=\"${TOOL_HOME}\"")
	TOOL_VERSIONS+=("${tool}_VER=\"${version}\"")
done

# Set the tool version variables, for informational purposes
for TOOL_VERSION in "${TOOL_VERSIONS[@]}" ; do
	eval export "${TOOL_VERSION}"
done

# Set the tool home variables, for informational purposes
for TOOL_HOME in "${TOOL_HOMES[@]}" ; do
	eval export "${TOOL_HOME}"
done

# Add the tool paths
NEW_PATH=""
for P in "${NEW_PATHS[@]}" ; do
	[ -n "${NEW_PATH}" ] && NEW_PATH+=":"
	NEW_PATH+="${P}"
done

# We use sanitize_path to end up with a clean path with no duplicate or empty entries
# We prioritize the new path to give opportunity to override system-default tools
export PATH="$(sanitize_path "${NEW_PATH}:${PATH}")"
ok "Added the detected tools to the path: [${PATH}]"

# Finally, source each tool's configuration scripts - version-specific first,
# then the parent directory's, and finally the overarching configuration script (if any).
# We do this after the other configurations complete in the event that tools need to talk
# to each other. Furthermore, each script is told via parameters what it's configuring -
# be it the version of the tool (for the tool-level script), or even the name of the tool
# and the version (for the top-level script). Each configuration script can nix the
# execution of the parent scripts by setting the IGNORE_PARENT variable to "true". This
# will cause configuration processing to stop right then and there. These configuration
# scripts can define more environment variables which will be preserved
say "‚öôÔ∏è Configuring the tools: [${TOOL_NAMES[@]@Q}]"
IGNORE_PARENT=""
for TOOL in "${TOOL_NAMES[@]}" ; do
	say "ü¶∫ Configuring [${TOOL}]..."
	TOOL_HOME="${TOOL}_HOME"
	TOOL_HOME="${!TOOL_HOME}"

	# Tool home is now ${TOOL_DIR}/${TOOL_NAME}/${TOOL_VERSION}, so figure out the values
	TOOL_VER="$(basename "${TOOL_HOME}")"
	TOOL_NAME="$(basename "$(dirname "${TOOL_HOME}")")"

	CFG_PARAMS=()
	CFG_PARAMS_STACK=("${TOOL_VER}" "${TOOL_NAME}")
	CANDIDATES=("${TOOL_HOME}" "${TOOL_HOME%/*}" "${TOOL_DIR}")
	(( i = 0 )) || true
	pushd "${TOOL_HOME}" &>/dev/null
	for CANDIDATE in "${CANDIDATES[@]}" ; do
		# Clear this flag - needs to be done every iteration
		IGNORE_PARENT=""

		# Seek out the candidate script
		CFG="${CANDIDATE}/${CONFIG}"
		if [ -f "${CFG}" ]; then
			. "${CFG}" "${CFG_PARAMS[@]}" || fail "Failed to apply the configurations from [${CFG}] for [${CFG_PARAMS[@]}] ..."
		fi
		[ ${i} -lt "${#CFG_PARAMS_STACK[@]}" ] && CFG_PARAMS=("${CFG_PARAMS_STACK[${i}]}" "${CFG_PARAMS[@]}")
		(( ++i ))

		# If this script wants the parent configuration script(s) to be ignored
		# it can set the IGNORE_PARENT variable to "true"
		as_boolean "${IGNORE_PARENT,,}" && break
	done
	popd &>/dev/null
done
ok "Tools configured!"

# Now, we apply any specific configuration files we want to apply. These are generally
# files that may or may not affect tool execution, but don't really need to be bound
# to a specific tool, nor tied to a specific init script.
say "‚öôÔ∏è Running the global configuration scripts"
while read CONF ; do
	CONF_NAME="$(basename "${CONF}")"

	# If it's not accessible, skip it ...
	[ -r "${CONF}" ] || { say "üö´ Configuration [${CONF_NAME}] is not readable, skipping." ; continue ; }
	[ -x "${CONF}" ] || { say "üö´ Configuration [${CONF_NAME}] is not accessible, skipping." ; continue ; }

	# If it's to be ignored, do so ...
	[ -e "${CONF}/${IGNORE}" ] && say "Configuration [${CONF_NAME}] is to be ignored, skipping." && continue

	pushd "${CONF}" &>/dev/null
	say "‚öôÔ∏è Deploying the configurations from [${CONF_NAME}] into [${HOME}]..."
	tar -C "${HOME}" -xvf <(tar --exclude "./${CONFIG}" -cf - .) || fail "Failed to transfer the configurations from ${CONF}"
	if [ -e "${CONFIG}" ] ; then
		# The configuration script exists. So execute it
		say "\tü¶∫ Configuration [${CONF_NAME}] has a script, sourcing it..."
		CONFIGURE_SCRIPT="$(readlink -e "${CONFIG}")"
		[ ${?} -eq 0 ] || fail "Failed to canonicalize the path for [${CONF}/${CONFIG}]"
		pushd "${HOME}" &>/dev/null
		. "${CONFIGURE_SCRIPT}" || fail "Failed to source the configuration script for [${CONF_NAME}]"
		popd &>/dev/null
	fi
	popd &>/dev/null
done < <(find "${CONF_DIR}" -mindepth 1 -maxdepth 1 -type d)

# Allow for initialization scripts to be added
if [ -d "${INIT_DIR}" ] ; then
	say "ü¶∫ Running initializer scripts in [${INIT_DIR}]..."
	( cd / && run-parts --report "${INIT_DIR}" )
fi

say "‚Ü©Ô∏è Restoring original bash option values..."
eval "${__OLD_BASH_OPTIONS__}"

if [ ${#} -gt 0 ] ; then
	# This cleans up OLDPWD, for security
	cd .

	say "üöÄ Launching command: [${@}] ..."
	exec "${@}"
else
	ok "Configuration complete - no command given to run"
fi
