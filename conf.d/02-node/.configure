#!/bin/bash

# This is safe to do, because in all our CI/CD builds, we're going to
# be using "the same" machine (i.e. identical containers).
#
# We'll see what this dredges up... XD
export NX_REJECT_UNKNOWN_LOCAL_CACHE=0

#
# Make sure the NodeJS cache is properly configured
#
[ -v NODE_CACHE ] || NODE_CACHE=""
[ -n "${NODE_CACHE}" ] || NODE_CACHE="${CACHE_DIR}/node"
export NODE_CACHE

npm config delete prefix
npm config set prefix "${NODE_CACHE}"
export npm_config_prefix="${NODE_CACHE}"

npm config delete cache
npm config delete cache --global
npm config set cache "${NODE_CACHE}/npm" --global
export npm_config_cache="${NODE_CACHE}/npm"

[ -v NODE_REGISTRY ] || NODE_REGISTRY=""
if [ -n "${NODE_REGISTRY}" ] ; then
	npm config delete registry
	npm config delete registry --global
	npm config set registry "${NODE_REGISTRY}" --global
	export npm_config_registry="${NODE_REGISTRY}"
fi

for REG in "${!NODE_REGISTRY_@}" ; do
	[[ "${REG}" =~ ^(@[^=:]+)=(.+)$ ]] || continue
	TAG="${BASH_REMATCH[1]}"
	URL="${BASH_REMATCH[2]}"
	npm config delete "${TAG}:registry"
	npm config delete "${TAG}:registry" --global
	npm config set "${TAG}:registry" "${URL}" --global
done

# This is no longer computed here, and leaving it in could cause problems
# export NODE_PATH="${NODE_CACHE}/lib/node_modules:${NODE_HOME}/lib/node_modules"
export PATH="${NODE_CACHE}/lib/node_modules/.bin:${PATH}"
