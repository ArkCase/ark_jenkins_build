#!/bin/bash
SCRIPT="$(/usr/bin/readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(/usr/bin/dirname "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

fail()
{
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

usage()
{
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} cluster-name"
	exit 1
}

[ ${#} -eq 1 ] || usage

#
# Make sure we're given a solid token
#
[ -v RANCHER_TOKEN ] || RANCHER_TOKEN=""
[ -n "${RANCHER_TOKEN}" ] || fail "Must provide a non-empty RANCHER_TOKEN value"
[[ "${RANCHER_TOKEN}" =~ ^[a-zA-Z0-9_-]+:.+$ ]] || fail "The RANCHER_TOKEN format is invalid"

#
# Allow for a configurable API endpoint, just in case...
#
[ -v RANCHER_API_URL ] || RANCHER_API_URL=""
[ -n "${RANCHER_API_URL}" ] || RANCHER_API_URL="https://rancher.armedia.com"

# Remove trailing slashes from the URL
[[ "${RANCHER_API_URL}" =~ ^(.*)/*$ ]] || fail "Invalid Rancher API URL [${RANCHER_API_URL}]"
RANCHER_API_ENDPOINT="${BASH_REMATCH[0]}/v1/management.cattle.io.projects"

CLUSTER_NAME="${1}"
[ -n "${CLUSTER_NAME}" ] || fail "Must provide a non-empty cluster name"

CURL="$(type -P curl)" || fail "Could not find 'curl' in the path"
JQ="$(type -P jq)" || fail "Could not find 'jq' in the path"
SORT="$(type -P sort)" || fail "Could not find 'sort' in the path"

CLUSTER_ID="$("${BASEDIR}/rancher-get-cluster-id" "${CLUSTER_NAME}")" || exit 1
RANCHER_API_ENDPOINT+="/${CLUSTER_ID}"
LIST="$("${CURL}" -fsSL -u "${RANCHER_TOKEN}" "${RANCHER_API_ENDPOINT}" | "${JQ}" -r ".data[] | .id + \" \" + .spec.displayName")" || fail "Could not find the project listing in cluster ${CLUSTER_NAME}"
echo "${LIST}" | "${SORT}" -k 2
exit 0
