#!/bin/bash

set -euo pipefail
. /.functions

usage()
{
	[ ${#} -eq 0 ] || echo -e "‚ùå ${@}\n"
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} repository workflow [ branch ] [ param1=value1 param2=value2 ... paramN=valueN ]"
	echo -e ""
	echo -e "\tYou can use '.' as teh repository name to identify the GitHub repository from the current directory's checkout"
	exit 1
}

ARGS="$(getopt -o "h?" -l "help" -n "${BASH_ARGV0:-${BASH_SOURCE:-${0}}}" -- "${@}")" || usage

eval set -- "${ARGS}"

while true ; do
	case "${1}" in
		--help | -h | "-?" ) usage ;;

		-- ) shift ; break ;;

		* ) usage ;;
	esac
done

[ ${#} -ge 2 ] || usage "You must at least specify the repository and the workflow"

REPO="${1}"
[ -n "${REPO}" ] || fail "The repository may not be an empty string"
if [ "${REPO}" == "." ] ; then
	REPO=()
else
	REPO=(--repo "${REPO}")
fi
shift

WORKFLOW="${1}"
[ -n "${WORKFLOW}" ] || fail "The workflow may not be an empty string"
shift

BRANCH=()
if [ ${#} -ge 1 ] ; then
	# This parameter is either the branch name (no = sign) or
	# the first parameter spec
	if [[ ! "${1}" =~ ^[0-9a-zA-Z_]+=.*$ ]] ; then
		BRANCH=(--ref "${1}")
		[ -n "${BRANCH}" ] || fail "The branch name may not be an empty string"
		shift
	fi
fi

#
# Parse out the parameter values to be sent for the build
#
PARAMS=()
for p in "${@}" ; do
	[ -z "${p}" ] && continue
	[[ "${p}" =~ ^[0-9a-zA-Z_]+=.*$ ]] || { warn "The parameter specification [${p}] is not valid - must be in the form name=value" ; continue ; }
	PARAMS+=(-f "${p}")
done

GH_USER_FLAGS=()
[ -v GH_WORKFLOW_USER ] && [ "${GH_WORKFLOW_USER:-""}" ] && GH_USER_FLAGS=(--user "${GH_WORKFLOW_USER}")

LAUNCH_DETAILS="$(gh-workflow-run "${REPO[@]}" "${BRANCH[@]}" "${WORKFLOW}" "${PARAMS[@]}")" || exit ${?}

LAUNCH_DETAILS="$(echo -n "${LAUNCH_DETAILS}" | yaml2json)" || fail "Failed to convert the gh-workflow-run output to JSON"

RUN_URL="$(jq -r '.runUrl // ""' <<< "${LAUNCH_DETAILS}")"
[ -n "${RUN_URL}" ] && eyes "The GigHub run can be tracked here: ${RUN_URL}"

RUN_ID="$(jq -r '.runId // ""' <<< "${LAUNCH_DETAILS}")"
[ -n "${RUN_ID}" ] || fail "Failed to get the run ID for the launched job"

# We have all the details we need, start the wait
exec gh-workflow-wait "${REPO[@]}" "${WORKFLOW}" "${RUN_ID}"
