#!/bin/bash
SCRIPT="$(/usr/bin/readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(/usr/bin/dirname "${SCRIPT}")"

set -euo pipefail

[ -v DOWNSCALE_TIMEOUT ] || DOWNSCALE_TIMEOUT=""
[ -n "${DOWNSCALE_TIMEOUT}" ] || DOWNSCALE_TIMEOUT="20m"

[ -v DOWNSCALE_RETRY_WAIT ] || DOWNSCALE_RETRY_WAIT=""
[ -n "${DOWNSCALE_RETRY_WAIT}" ] || DOWNSCALE_RETRY_WAIT="15s"

[ -v DISABLE_DOWNSCALE ] || DISABLE_DOWNSCALE=""
case "${DISABLE_DOWNSCALE,,}" in
	true | t | yes | y ) DISABLE_DOWNSCALE="true" ;;
	* ) DISABLE_DOWNSCALE="false" ;;
esac
export DISABLE_DOWNSCALE

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

doing()
{
	say "👉 ${@}"
}

ok()
{
	say "✅ ${@}"
}

warn()
{
	say "⚠️ ${@}"
}

err()
{
	say "❌ ${@}" 1>&2
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_deployed()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"
	execute "${HELM}" get --namespace "${NAMESPACE}" all "${RELEASE}" &>/dev/null
	return ${?}
}

is_valid_name()
{
	local STR="${1}"
	[[ "${STR}" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || return 1
	return 0
}

execute()
{
	#
	# Show the command about to be executed
	#
	say "${@@Q}"
	if "${DISABLE_DOWNSCALE}" ; then
		warn "Deployment disabled: skipping the command execution"
		return 0
	fi

	#
	# Proceed with the execution
	#
	( exec "${@}" )
	return ${?}
}

#
# This function returns the number that serves as
# a multiplier/divisor for a given time scale
#
get_time_mul()
{
	local TAG="${1^^}"

	[[ "${TAG}" =~ ^[HDMS]$ ]] || return 1
	local DURATION_S=1
	local DURATION_M=$(( DURATION_S * 60 ))
	local DURATION_H=$(( DURATION_M * 60 ))
	local DURATION_D=$(( DURATION_H * 24 ))

	local VAR="DURATION_${TAG}"
	echo -n "${!VAR}"
}

#
# This function converts numbers of seconds into
# K8s timespecs, but leaves timespec strings alone
#
secs_to_timestr()
{
	local STR="${1}"
	local NUM="(0|[1-9][0-9]*)"

	[ -n "${STR}" ] || return 1

	# If it's already a time string, return it
	if [[ "${STR^^}" =~ ^(${NUM}D)?(${NUM}H)?(${NUM}M)?(${NUM}S)?$ ]] ; then
		echo -n "${STR,,}"
		return 0
	fi

	[[ "${STR}" =~ ^${NUM}$ ]] || return 1

	local RET=""
	local SIZE=0
	local MUL=0
	local SECS=${STR}
	for C in D H M S ; do
		MUL=$(get_time_mul "${C}")
		(( SIZE = ( SECS / MUL ) ))
		[ ${SIZE} -gt 0 ] && RET+="${SIZE}${C}"
		(( SECS -= ( SIZE * MUL ) ))
	done

	echo -n ${RET,,}
	return 0
}

#
# This function converts K8s timespecs into
# numbers of seconds, but leaves numbers alone
#
timestr_to_secs()
{
	local STR="${1}"
	local NUM="(0|[1-9][0-9]*)"

	# If it's a straight-up number,
	# seconds already, so just return it
	if [[ "${STR}" =~ ^${NUM}$ ]] ; then
		echo -e "${STR}"
		return 0
	fi

	# It could be a time string, so parse it out
	[ -n "${STR}" ] || return 1
	[[ "${STR^^}" =~ ^(${NUM}D)?(${NUM}H)?(${NUM}M)?(${NUM}S)?$ ]] || return 1

	local PARTS=( "${BASH_REMATCH[@]:1}" )
	[ ${#PARTS[@]} -ge 1 ] || return 1

	local SIZE=0
	local MUL=0
	local SECS=0
	for (( i = 0 ; i < ${#PARTS[@]} ; i++ )) ; do
		[[ "${PARTS[i]}" =~ ^${NUM}([DHMS])$ ]] || continue
		SIZE=${BASH_REMATCH[1]}
		MUL=$(get_time_mul "${BASH_REMATCH[2]}")
		(( SECS += SIZE * MUL ))
	done

	echo -n ${SECS}
	return 0
}

list_remaining()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"

	"${KUBECTL}" \
		get statefulsets.apps \
		--namespace "${NAMESPACE}" \
		--selector="app.kubernetes.io/instance=${RELEASE}" \
		-o json | \
		"${JQ}" -r '.items[] | select(.status.replicas > 0) | .metadata.name' | \
		"${SORT}" -u
}

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} [namespace] release" 1>&2
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

DOWNSCALE_TIMEOUT=$(timestr_to_secs "${DOWNSCALE_TIMEOUT}") || fail "Invalid value for DOWNSCALE_TIMEOUT: [${DOWNSCALE_TIMEOUT}]"
DOWNSCALE_RETRY_WAIT=$(timestr_to_secs "${DOWNSCALE_RETRY_WAIT}") || fail "Invalid value for DOWNSCALE_RETRY_WAIT: [${DOWNSCALE_RETRY_WAIT}]"

HELM="$(type -P helm)" || fail "Failed to find helm in the path"
JQ="$(type -P jq)" || fail "Failed to find jq in the path"
KUBECTL="$(type -P kubectl)" || fail "Failed to find kubectl in the path"
SORT="$(type -P sort)" || fail "Failed to find sort in the path"

if [ ${#} -eq 1 ] ; then
	NAMESPACE="$("${KUBECTL}" config view --minify -o jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
else
	NAMESPACE="${1}"
	shift
fi
is_valid_name "${NAMESPACE}" || fail "Invalid namespace name [${NAMESPACE}]"

RELEASE="${1}"
is_valid_name "${RELEASE}" || fail "Invalid release name [${RELEASE}]"

# If there's no deployment, do nothing...
is_deployed "${NAMESPACE}" "${RELEASE}" || fail "The release [${RELEASE}] is not deployed into namespace [${NAMESPACE}] ... can't validate it"

# Delete any prior test pods
# NOTE: the timeout is PER ITEM, not total...
doing "Downscaling the existing StatefulSet instances"
execute \
	"${KUBECTL}" scale statefulset \
		--namespace "${NAMESPACE}" \
		--replicas=0 \
		--selector="app.kubernetes.io/instance=${RELEASE}" && \
	ok "Downscale requested!" || \
	warn "Failed to downscale any StatefulSet instances"

DOWNSCALE_TIMEOUT_STR="$(secs_to_timestr "${DOWNSCALE_TIMEOUT}")"
DOWNSCALE_RETRY_WAIT_STR="$(secs_to_timestr "${DOWNSCALE_RETRY_WAIT}")"
say "⌛ Waiting for the downscale to complete (up to ${DOWNSCALE_TIMEOUT_STR} total)..."
START="$(/usr/bin/date +%s)"
while true ; do

	# Get the StatefulSets that are still waiting to downscale
	say "👀 Looking for any remaining StatefulSet instances that haven't scaled down yet..."
	REMAINING=( $(list_remaining "${NAMESPACE}" "${RELEASE}") )

	# If there are no more, we're done!
	[ ${#REMAINING[@]} -gt 0 ] || break

	warn "There are ${#REMAINING[@]} StatefulSet instances: [ ${REMAINING[@]} ]"

	# There are still some ... have we timed out yet?
	NOW="$(/usr/bin/date +%s)"
	(( DIFF = ( NOW - START ) )) || true
	[ ${DIFF} -lt ${DOWNSCALE_TIMEOUT} ] || fail "Timed out waiting for the StatefulSet instances to scale down to 0"

	# Make sure our wait doesn't put us overbudget on the total wait
	# time period, and make sure that if we have to wait one last time,
	# that it also doesn't exceed our expected timeout
	(( REMAINING = DOWNSCALE_TIMEOUT - DIFF )) || true
	[ ${REMAINING} -gt 0 ] || fail "Timed out waiting for the StatefulSet instances to scale down to 0"
	if [ ${REMAINING} -lt ${DOWNSCALE_RETRY_WAIT} ] ; then
		# This will be our last wait, so just wait for however
		# long the timeout is remaining and try one last time
		DOWNSCALE_RETRY_WAIT=${REMAINING}
		DOWNSCALE_RETRY_WAIT_STR="$(secs_to_timestr "${DOWNSCALE_RETRY_WAIT}")"
	fi

	say "⌛ Will wait ${DOWNSCALE_RETRY_WAIT_STR} before the next attempt..."
	/usr/bin/sleep ${DOWNSCALE_RETRY_WAIT} || fail "Sleep interrupted - cannot continue!"
done

ok "Downscale complete!"
