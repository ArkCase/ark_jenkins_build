#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"

set -euo pipefail

[ -v DOWNSCALE_TIMEOUT ] || DOWNSCALE_TIMEOUT=""
[ -n "${DOWNSCALE_TIMEOUT}" ] || DOWNSCALE_TIMEOUT="20m"

[ -v POD_WAIT_TIMEOUT ] || POD_WAIT_TIMEOUT=""
[ -n "${POD_WAIT_TIMEOUT}" ] || POD_WAIT_TIMEOUT="5m"

[ -v DISABLE_DOWNSCALE ] || DISABLE_DOWNSCALE=""
case "${DISABLE_DOWNSCALE,,}" in
	true | t | yes | y ) DISABLE_DOWNSCALE="true" ;;
	* ) DISABLE_DOWNSCALE="false" ;;
esac
export DISABLE_DOWNSCALE

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

doing()
{
	say "👉 ${@}"
}

ok()
{
	say "✅ ${@}"
}

warn()
{
	say "⚠️ ${@}"
}

err()
{
	say "❌ ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_deployed()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"
	execute helm get --namespace "${NAMESPACE}" all "${RELEASE}" &>/dev/null
	return ${?}
}

is_valid_name()
{
	local STR="${1}"
	[[ "${STR}" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || return 1
	return 0
}

execute()
{
	#
	# Show the command about to be executed
	#
	say "${@@Q}"
	if "${DISABLE_DOWNSCALE}" ; then
		warn "Downscaling disabled: skipping the command execution"
		return 0
	fi

	#
	# Proceed with the execution
	#
	( exec "${@}" )
	return ${?}
}

#
# This function returns the number that serves as
# a multiplier/divisor for a given time scale
#
get_time_mul()
{
	local TAG="${1^^}"

	[[ "${TAG}" =~ ^[HDMS]$ ]] || return 1
	local DURATION_S=1
	local DURATION_M=$(( DURATION_S * 60 ))
	local DURATION_H=$(( DURATION_M * 60 ))
	local DURATION_D=$(( DURATION_H * 24 ))

	local VAR="DURATION_${TAG}"
	echo -n "${!VAR}"
}

#
# This function converts numbers of seconds into
# K8s timespecs, but leaves timespec strings alone
#
secs_to_timestr()
{
	local STR="${1}"
	local NUM="(0|[1-9][0-9]*)"

	[ -n "${STR}" ] || return 1

	# If it's already a time string, return it
	if [[ "${STR^^}" =~ ^(${NUM}D)?(${NUM}H)?(${NUM}M)?(${NUM}S)?$ ]] ; then
		echo -n "${STR,,}"
		return 0
	fi

	[[ "${STR}" =~ ^${NUM}$ ]] || return 1

	local RET=""
	local SIZE=0
	local MUL=0
	local SECS=${STR}
	for C in D H M S ; do
		MUL=$(get_time_mul "${C}")
		(( SIZE = ( SECS / MUL ) ))
		[ ${SIZE} -gt 0 ] && RET+="${SIZE}${C}"
		(( SECS -= ( SIZE * MUL ) ))
	done

	echo -n ${RET,,}
	return 0
}

#
# This function converts K8s timespecs into
# numbers of seconds, but leaves numbers alone
#
timestr_to_secs()
{
	local STR="${1}"
	local NUM="(0|[1-9][0-9]*)"

	# If it's a straight-up number,
	# seconds already, so just return it
	if [[ "${STR}" =~ ^${NUM}$ ]] ; then
		echo -e "${STR}"
		return 0
	fi

	# It could be a time string, so parse it out
	[ -n "${STR}" ] || return 1
	[[ "${STR^^}" =~ ^(${NUM}D)?(${NUM}H)?(${NUM}M)?(${NUM}S)?$ ]] || return 1

	local PARTS=( "${BASH_REMATCH[@]:1}" )
	[ ${#PARTS[@]} -ge 1 ] || return 1

	local SIZE=0
	local MUL=0
	local SECS=0
	for (( i = 0 ; i < ${#PARTS[@]} ; i++ )) ; do
		[[ "${PARTS[i]}" =~ ^${NUM}([DHMS])$ ]] || continue
		SIZE=${BASH_REMATCH[1]}
		MUL=$(get_time_mul "${BASH_REMATCH[2]}")
		(( SECS += SIZE * MUL ))
	done

	echo -n ${SECS}
	return 0
}

wait_for_pods_to_die()
{
	local NAMESPACE="${1}"
	local ELEMENT="${2}"
	local TIMEOUT="${3}"

	local JSON=""
	JSON="$(kubectl --namespace "${NAMESPACE}" get "${ELEMENT}" --output json)" || return ${?}

	local JQ_EXPR='.spec.selector.matchLabels | keys[] as $k | "\($k)=\(.[$k])"'
	local LABELS=""
	LABELS="$(jq -r "${JQ_EXPR}" <<< "${JSON}" | tr '\n' ',' | sed -e 's;,$;;g')" || return ${?}
	[ -n "${LABELS}" ] || return 1

	local TIMEOUT_STR="$(secs_to_timestr "${TIMEOUT}")"

	# Wait for up to 5 minutes
	say "💤 Waiting up to ${TIMEOUT_STR} for the pods from ${ELEMENT} to die..."
	execute kubectl --namespace "${NAMESPACE}" wait --for=delete pods --selector "${LABELS}" --timeout "${TIMEOUT_STR}"
}

list_scalable_items()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"

	local TYPES=(statefulset deployment)

	for TYPE in "${TYPES[@]}" ; do
		kubectl \
			get "${TYPE}" \
			--namespace "${NAMESPACE}" \
			--selector "app.kubernetes.io/instance=${RELEASE}" \
			--output name
	done | sort -u
}

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} [namespace] release" 1>&2
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

DOWNSCALE_TIMEOUT=$(timestr_to_secs "${DOWNSCALE_TIMEOUT}") || fail "Invalid value for DOWNSCALE_TIMEOUT: [${DOWNSCALE_TIMEOUT}]"
POD_WAIT_TIMEOUT=$(timestr_to_secs "${POD_WAIT_TIMEOUT}") || fail "Invalid value for POD_WAIT_TIMEOUT: [${POD_WAIT_TIMEOUT}]"

if [ ${#} -eq 1 ] ; then
	NAMESPACE="$(kubectl config view --minify --output jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
else
	NAMESPACE="${1}"
	shift
fi
is_valid_name "${NAMESPACE}" || fail "Invalid namespace name [${NAMESPACE}]"

RELEASE="${1}"
is_valid_name "${RELEASE}" || fail "Invalid release name [${RELEASE}]"

# If there's no deployment, do nothing...
is_deployed "${NAMESPACE}" "${RELEASE}" || fail "The release [${RELEASE}] is not deployed into namespace [${NAMESPACE}] ... can't validate it"

# Delete any prior test pods
# NOTE: the timeout is PER ITEM, not total...
readarray -t ELEMENTS < <(list_scalable_items "${NAMESPACE}" "${RELEASE}")
if [ ${#ELEMENTS[@]} -le 0 ] ; then
	say "👀 There are no scalable resources to downscale"
	exit 0
fi

doing "Downscaling the ${#ELEMENTS[@]} existing scalable resources..."
execute kubectl scale "${ELEMENTS[@]}" --namespace "${NAMESPACE}" --replicas 0 || fail "Failed to downscale the scalable resources!"

ok "Downscale requested!"
DOWNSCALE_TIMEOUT_STR="$(secs_to_timestr "${DOWNSCALE_TIMEOUT}")"
START="$(date +%s)"
# Wait for all pops related to the given elements to disappear ...
say "⌛ Waiting for the downscale to complete (up to ${DOWNSCALE_TIMEOUT_STR} total)..."
for E in "${ELEMENTS[@]}" ; do
	wait_for_pods_to_die "${NAMESPACE}" "${E}" "${POD_WAIT_TIMEOUT}" || warn "Failed to wait for the pods to disappear for ${E}"

	# There are still some ... have we timed out yet?
	NOW="$(date +%s)"
	(( DIFF = ( NOW - START ) )) || true
	[ ${DIFF} -lt ${DOWNSCALE_TIMEOUT} ] || fail "Timed out waiting for ${E} to scale down to 0"

	# Make sure our wait doesn't put us overbudget on the total wait
	# time period, and make sure that if we have to wait one last time,
	# that it also doesn't exceed our expected timeout
	(( REMAINING = DOWNSCALE_TIMEOUT - DIFF )) || true
	[ ${REMAINING} -gt 0 ] || fail "Timed out waiting for ${E} instances to scale down to 0"
	if [ ${REMAINING} -lt ${POD_WAIT_TIMEOUT} ] ; then
		# This will be our last wait, so just wait for however
		# long the timeout is remaining and try one last time
		POD_WAIT_TIMEOUT=${REMAINING}
	fi
done
ok "Downscale complete!"
