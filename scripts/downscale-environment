#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"

set -euo pipefail
. /.functions

set_or_default DOWNSCALE_TIMEOUT "20m"

set_as_boolean DISABLE_DOWNSCALE
export DISABLE_DOWNSCALE

is_deployed()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"
	execute helm get --namespace "${NAMESPACE}" all "${RELEASE}" &>/dev/null
	return ${?}
}

execute()
{
	execute_unless DISABLE_DOWNSCALE "${@}"
	return ${?}
}

list_scalable_items()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"
	local SELECTOR="${3}"

	local TYPES=(statefulset deployment daemonset)

	for TYPE in "${TYPES[@]}" ; do
		kubectl \
			get "${TYPE}" \
			--namespace "${NAMESPACE}" \
			--selector "${SELECTOR}" \
			--output name
	done | sort -u
}

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} [namespace] release" 1>&2
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

DOWNSCALE_TIMEOUT=$(timestr_to_secs "${DOWNSCALE_TIMEOUT}") || fail "Invalid value for DOWNSCALE_TIMEOUT: [${DOWNSCALE_TIMEOUT}]"

if [ ${#} -eq 1 ] ; then
	NAMESPACE="$(kubectl config view --minify --output jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
else
	NAMESPACE="${1}"
	shift
fi
is_valid_hostname_part "${NAMESPACE}" || fail "Invalid namespace name [${NAMESPACE}]"

RELEASE="${1}"
is_valid_hostname_part "${RELEASE}" || fail "Invalid release name [${RELEASE}]"

# If there's no deployment, do nothing...
is_deployed "${NAMESPACE}" "${RELEASE}" || fail "The release [${RELEASE}] is not deployed into namespace [${NAMESPACE}] ... can't validate it"

SELECTOR="app.kubernetes.io/instance=${RELEASE},arkcase.com/task=work"

# Delete any prior test pods
# NOTE: the timeout is PER ITEM, not total...
readarray -t ELEMENTS < <(list_scalable_items "${NAMESPACE}" "${RELEASE}" "${SELECTOR}")
if [ ${#ELEMENTS[@]} -le 0 ] ; then
	say "ðŸ‘€ There are no scalable resources to downscale"
	exit 0
fi

doing "Downscaling the ${#ELEMENTS[@]} existing scalable resources..."
execute kubectl scale "${ELEMENTS[@]}" --namespace "${NAMESPACE}" --replicas 0 || fail "Failed to downscale the scalable resources!"

ok "Downscale requested!"
DOWNSCALE_TIMEOUT_STR="$(secs_to_timestr "${DOWNSCALE_TIMEOUT}")"
START="$(date +%s)"
# Wait for all workload pods to disappear...
while true ; do
	say "âŒ› Waiting for the downscale to complete (up to ${DOWNSCALE_TIMEOUT_STR} total)..."

	# If this wait succeeds, we need not wait any further ...
	execute kubectl --namespace "${NAMESPACE}" wait --for=delete pods --selector "${SELECTOR}" --timeout "${DOWNSCALE_TIMEOUT_STR}" && break

	# The wait has timed out
	warn "Failed to wait for the workload pods to disappear"

	# Have we timed out yet? If we have, we puke out directly
	NOW="$(date +%s)"
	(( DIFF = ( NOW - START ) )) || true

	# Make sure our wait doesn't put us overbudget on the total wait
	# time period, and make sure that if we have to wait one last time,
	# that it also doesn't exceed our expected timeout
	(( REMAINING = DOWNSCALE_TIMEOUT - DIFF )) || true

	# If there's no remaining time, we puke out ...
	[ ${REMAINING} -gt 0 ] || fail "Timed out waiting for the workload pods to disappear"

	# There's still time remaining, but less than before, so
	# let's use that instead of the original value...
	DOWNSCALE_TIMEOUT=${REMAINING}
	DOWNSCALE_TIMEOUT_STR="$(secs_to_timestr "${DOWNSCALE_TIMEOUT}")"
done
ok "Downscale complete!"
