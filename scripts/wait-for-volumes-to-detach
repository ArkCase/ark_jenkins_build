#!/bin/bash

set -euo pipefail
. /.functions

set_or_default DETACHMENT_WAIT_TIMEOUT "20m"

set_as_boolean DISABLE_DETACHMENT_WAIT
export DISABLE_DETACHMENT_WAIT

execute()
{
	execute_unless DISABLE_DETACHMENT_WAIT "${@}"
	return ${?}
}

is_harvester_cluster()
{
	local CLUSTER="${1}"
	kubectl \
		--kubeconfig "${HARVESTER_CFG}" \
		get namespace "${CLUSTER}" &>/dev/null
	return ${?}
}

get_longhorn_volume_name()
{
	local CLUSTER="${1}"
	local PV="${2}"

	kubectl \
		--kubeconfig "${HARVESTER_CFG}" \
		--namespace "${CLUSTER}" \
		get pvc "${PV}" -o json | \
		jq -r '.spec.volumeName'
}

get_longhorn_volume_data()
{
	local CLUSTER="${1}"
	local PV="${2}"

	local VOLUME="$(get_longhorn_volume_name "${@}")"
	[ -n "${VOLUME}" ] || return 1
	kubectl \
		--kubeconfig "${HARVESTER_CFG}" \
		--namespace "${LONGHORN_NAMESPACE}" \
		get volume "${VOLUME}" -o json
}

get_release_pvs()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"

	kubectl \
		--kubeconfig "${CLUSTER_CFG}" \
		--namespace "${NAMESPACE}" \
		get pvc \
			-l "app.kubernetes.io/instance=${RELEASE}" \
			-o custom-columns="PV:.spec.volumeName" --no-headers
}

get_longhorn_volume()
{
	local CLUSTER="${1}"
	local NAMESPACE="${2}"
	local PVC="${3}"
	local PV="$(get_pv "${@}")" || return 1

	local DATA="$(get_longhorn_volume_data "${CLUSTER}" "${PV}")"
	echo "${DATA}"
}

cleanup()
{
	[ -n "${CLUSTER_CFG:-}" ] && shred -u "${CLUSTER_CFG}"
	[ -n "${HARVESTER_CFG:-}" ] && shred -u "${HARVESTER_CFG}"
}

usage()
{
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} cluster namespace release"
	exit 1
}

[ ${#} -eq 3 ] || usage

CLUSTER="${1}"
is_valid_hostname_part "${CLUSTER}" || fail "Invalid Rancher cluster name: [${CLUSTER}]"

NAMESPACE="${2}"
is_valid_hostname_part "${NAMESPACE}" || fail "Invalid namespace: [${NAMESPACE}]"

RELEASE="${3}"
is_valid_hostname_part "${RELEASE}" || fail "Invalid release name: [${RELEASE}]"

[ -v HARVESTER ] || HARVESTER=""
[ -n "${HARVESTER}" ] || HARVESTER="harvester-ai5"
is_valid_hostname_part "${HARVESTER}" || fail "Invalid Harvester cluster name: [${HARVESTER}]"

[ -v LONGHORN_NAMESPACE ] || LONGHORN_NAMESPACE=""
[ -n "${LONGHORN_NAMESPACE}" ] || LONGHORN_NAMESPACE="longhorn-system"
is_valid_hostname_part "${LONGHORN_NAMESPACE}" || fail "Invalid Longhorn namespace: [${LONGHORN_NAMESPACE}]"

trap cleanup EXIT

HARVESTER_CFG="$(mktemp "${HARVESTER}.XXXXXXXX.conf")"
rancher-get-kubeconfig "${HARVESTER}" "${HARVESTER_CFG}" || exit ${?}
ok "Downloaded the kubeconfig for ${HARVESTER}"

#
# Validation: is this cluster a Harvester/Longhorn cluster?
#
is_harvester_cluster "${CLUSTER}" || quit "The cluster ${CLUSTER} is not a Harvester cluster, cannot wait for Longhorn volumes"

CLUSTER_CFG="$(mktemp "${CLUSTER}.XXXXXXXX.conf")"
rancher-get-kubeconfig "${CLUSTER}" "${CLUSTER_CFG}" || exit ${?}
ok "Downloaded the kubeconfig for ${CLUSTER}"

#
# Step one: get the non-ephemeral PVs from the namespace
#

PVS="$(get_release_pvs "${NAMESPACE}" "${RELEASE}" 2>&1)" || fail "Failed to get the PVS at ${CLUSTER}::${NAMESPACE}, release ${RELEASE} (rc=${?}): ${PVS}"

readarray -t PVS <<< "${PVS}"

[ ${#PVS[@]} -gt 1 ] || quit "No PVs found for release ${RELEASE} at ${CLUSTER}::${NAMESPACE}"

#
# Step two: convert those PV names into Longhorn volume object names
#
VOLUMES=()
S="s"
[ ${#PVS[@]} -ne 1 ] || S=""
say "Resolving ${#PVS[@]} PersistentVolume object${S} to the underlying Longhorn Volume objects: ${PVS[@]}"
for PV in "${PVS[@]}" ; do
	if ! VOLUME="$(get_longhorn_volume_name "${CLUSTER}" "${PV}" 2>&1)" ; then
		err "Failed to get the volume name for the PV ${CLUSTER}::${PV} (rc=${?}): ${VOLUME}"
		continue
	fi

	say "\tResolved ${PV} -> ${VOLUME}"

	VOLUMES+=( "${VOLUME}" )
done

[ ${#VOLUMES[@]} -gt 1 ] || quit "No Volume objects could be resolved"

#
# Step three: begin the wait on those Longhorn volumes to detach
#
S="s"
[ ${#VOLUMES[@]} -ne 1 ] || S=""
say "Waiting for the above ${#VOLUMES[@]} volume${S} to become detached..."
execute kubectl \
	--kubeconfig "${HARVESTER_CFG}" \
	--namespace "${LONGHORN_NAMESPACE}" \
	wait volume "${VOLUMES[@]}" \
	--for jsonpath=".status.state=detached" \
	--timeout "${DETACHMENT_WAIT_TIMEOUT}"
