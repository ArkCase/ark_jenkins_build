#!/bin/bash


say() {
	echo -e "${@}"
}

warn() {
	say "WARNING: ${@}" 1>&2
}

err() {
	say "ERROR: ${@}" 1>&2
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

usage() {
	fail "usage: ${0} [-A application] [-b keysize-bits] [-c openssl-config] [-k keystore-type-1,keystore-type-2,...] [-p password | -P] [-t certificate-type] [-v validity-period-days] [-u CA-URL] [-j Java-Home] SUBJECT [ASN_1 ASN_2 ... ASN_X]"
}

KEYSTORE_TYPES=()
KEYSTORE_TYPES+=("jceks")
KEYSTORE_TYPES+=("jks")

# Default descriptions
COUNTRY="US"
STATE="GA"
LOCALITY="Atlanta"
ORGANIZATION="Armedia"
ORGANIZATION_UNIT="ArkCase"
EMAIL="security@armedia.com"

# Default passphrase
PASSWORD="ItSaSeCret"

# make sure you have applied the JCE unlimited encryption strength policy to your JRE
#  get it from here for Java 1.8 - http://www.oracle.com/technetwork/java/javase/downloads/jce8-download-2133166.html

# specify your Windows Enterprise CA here
CA_URL="https://armdeswca1.appdev.armedia.com/certsrv"
#CA_URL="https://pki.appdev.armedia.com/certsrv"
#CA_URL="https://arm-pr-w8x-ad05.armedia.com/certsrv"

# choose cert type - WebServer is good for web server apps, WebServerAndClientAuthentication is useful for mutual SSL auth
#CERT_TYPE="WebServerAndClientAuthentication"
#CERT_TYPE="WebServerV5"
#CERT_TYPE="WebServerV4"
#CERT_TYPE="WebServer"
CERT_TYPE="WebServerV4"

# set key size, 4096 is our standard and many of our cert temaplates will not support less than 4096
KEYSIZE=4096

# set validity, this will be limited based on cert template used and remaining validity of enterprise CA cert
KEY_VALIDITY_PERIOD=730

APPLICATION_SET=false
KEYSIZE_SET=false
CONFIG_SET=false
KEYSTORE_TYPES_SET=false
PASSWORD_SET=false
PASSWORD_ASK_SET=false
CERT_TYPE_SET=false
KEY_VALIDITY_PERIOD_SET=false
CA_URL_SET=false
JAVA_HOME_SET=false

while getopts ":A:b:c:k:p:Pt:v:u:j:h" OPT "${@}" ; do
	case "${OPT}" in
		A )	${APPLICATION_SET} && fail "Can't set more than one application name (-A)"
			[ -z "${OPTARG}" ] && fail "Can't set an empty application name (-A)"
			APPLICATION="${OPTARG}"
			APPLICATION_SET=true
			;;

		b )	${KEYSIZE_SET} && fail "Can't set more than one key size (-b)"
			[[ "${OPTARG}" =~ ^[1-9][0-9]+$ ]] || fail "The given key size of [${OPTARG}] is not a valid number (-b)"
			# TODO: Validate that it's a power-of-two?
			KEYSIZE=${OPTARG}
			KEYSIZE_SET=true
			;;

		c )	${CONFIG_SET} && fail "Can't set more than one configuration (-c)"
			[ -e "${OPTARG}" ] || fail "The file [${OPTARG}] does not exist (-c)"
			[ -f "${OPTARG}" ] || fail "The path [${OPTARG}] is not a regular file (-c)"
			[ -r "${OPTARG}" ] || fail "The file [${OPTARG}] is not readable (-c)"
			CONFIG="${OPTARG}"
			CONFIG_SET=true
			;;

		k )	${KEYSTORE_TYPES_SET} && fail "Can't set the keystore types (-k) more than once"
			KEYSTORE_TYPES=()
			IFS="," read -r -a KEYSTORE_TYPES <<< "${OPTARG}"
			KEYSTORE_TYPES_SET=true
			;;

		p )	${PASSWORD_SET} && fail "Can't set more than one password (-p)"
			${PASSWORD_ASK_SET} && fail "Can't set the password (-p) when it's already going to be asked for (-P)"
			[ -z "${OPTARG}" ] && fail "Can't use an empty password (-p)"
			[ ${#OPTARG} -lt 6 ] && fail "The password must be at least 6 characters long (-p)"
			PASSWORD="${OPTARG}"
			PASSWORD_SET=true
			;;

		P )	${PASSWORD_SET} && fail "Can't ask for the password (-P) when it's already been set (-p)"
			PASSWORD_ASK_SET=true
			;;

		t )	${CERT_TYPE_SET} && fail "Can't set more than one certificate type (-t)"
			[ -z "${CERT_TYPE}" ] && fail "Can't set an empty certificate type (-t)"
			CERT_TYPE="${OPTARG}"
			;;

		v )	${KEY_VALIDITY_PERIOD_SET} && fail "Can't set more than one certifiate validity period (-v)"
			[[ "${OPTARG}" =~ ^[1-9][0-9]+$ ]] || fail "The given key validity period of [${OPTARG}] is not a valid number (-v)"
			KEY_VALIDITY_PERIOD="${OPTARG}"
			KEY_VALIDITY_PERIOD_SET=true
			;;

		u )	${CA_URL_SET} && fail "Can't set more than one CA URL (-u)"
			[ -z "${OPTARG}" ] && fail "Can't set an empty CA URL (-u)"
			CA_URL="${OPTARG}"
			CA_URL_SET=true
			;;

		j )	${JAVA_HOME_SET} && fail "Can't set more than one JAVA_HOME value (-j)"
			[ -z "${OPTARG}" ] && fail "Can't set an empty JAVA_HOME value (-j)"
			JAVA_HOME="${OPTARG}"
			JAVA_HOME_SET=true
			;;

		: )	fail "Option -${OPTARG} requires an argument" ;;

		h )	usage ;;

		\? )	usage ;;
	esac
done
shift $(( ${OPTIND} - 1 ))

[ ${#} -lt 1 ] && fail "No SUBJECT given - nothing to do"

check_hostname() {
        local CN="${1,,}"
        [[ "${CN}" =~ ^([a-z0-9][-a-z0-9]*)?[a-z0-9]([.]([a-z0-9][-a-z0-9]*)?[a-z0-9])*$ ]] || return 1
        return 0
}

CERT_CN=("${@}")
FINAL_CN=()
ERRORS=()
for CN in "${CERT_CN[@]}" ; do
	if check_hostname "${CN}" ; then
		FINAL_CN+=("${CN,,}")
	else
		ERRORS+=("${CN}")
	fi
done
if [ -n "${ERRORS[0]}" ] ; then
	err "Illegal hostnames given in the command line:"
	for E in "${ERRORS}" ; do
		say "\t${E}" 1>&2
	done
	exit 1
fi
CERT_CN=("${FINAL_CN[@]}")

if ${APPLICATION_SET} ; then
	check_hostname "${APPLICATION}" || fail "The application name [${APPLICATION}] is not a valid hostanme"
else
	APPLICATION="${CERT_CN[0]}"
	warn "Application name not set with -A, will use the value [${APPLICATION}]"
fi

if ${PASSWORD_ASK_SET} ; then
	read -p "Password:" -s P1
	echo "" 1>&2
	read -p "Confirm :" -s P2
	echo "" 1>&2
	[ "${P1}" != "${P2}" ] && fail "Passwords did not match"
	[ -z "${P1}" ] && fail "Can't use an empty password"
	[ ${#P1} -lt 6 ] && fail "The password must be at least 6 characters long"
	PASSWORD="${P1}"
elif ! ${PASSWORD_SET} ; then
	warn "Password was not set with -p, will use the default value of [${PASSWORD}]"
fi

[ -d "${APPLICATION}" ] && fail "A folder for [${APPLICATION}] already exists ... can't continue"

mkdir -p "${APPLICATION}" || fail "Couldn't create the home folder for [${APPLICATION}]"
cd "${APPLICATION}" || fail "Couldn't CD into the home folder for [${APPLICATION}]"


# First things first: authenticate
klist || kinit || fail "Failed to authenticate for Kerberos negotiation"

KEYTOOL="$(readlink -f "$(which keytool)")"
if [ -z "${KEYTOOL}" ] && [ -n "${JAVA_HOME}" ] ; then
	KT="${JAVA_HOME}/bin/keytool"
	[ -e "${KT}" ] && [ -f "${KT}" ] && [ -r "${KT}" ] && [ -x "${KT}" ] && KEYTOOL="${KT}"
fi
[ -n "${KEYTOOL}" ] || warn "The 'keytool' wasn't found in the path - no Java keystores will be generated"

# filename artifact settings
CONFIG="./${APPLICATION}.cfg"
APPLICATION_KEY_PEM="${APPLICATION}_key.pem"
APPLICATION_KEY_PEM_PATH="./${APPLICATION_KEY_PEM}"
APPLICATION_RAND_FILE="${APPLICATION}.rand"
APPLICATION_RAND_FILE_PATH="./${APPLICATION_RAND_FILE}"
APPLICATION_CSR="${APPLICATION}.csr"
APPLICATION_CSR_PATH="./${APPLICATION_CSR}"
APPLICATION_CRT="${APPLICATION}.crt"
APPLICATION_CRT_PATH="./${APPLICATION_CRT}"
APPLICATION_P7B="${APPLICATION}.p7b"
APPLICATION_P7B_PATH="./${APPLICATION_P7B}"
APPLICATION_P12="${APPLICATION}.p12"
APPLICATION_P12_PATH="./${APPLICATION_P12}"
APPLICATION_CERTSRV_REQ="${APPLICATION}_certsrv_request.html"
APPLICATION_CERTSRV_REQ_PATH="./${APPLICATION_CERTSRV_REQ}"
INT_CA="${APPLICATION}_int_ca"
ROOT_CA="${APPLICATION}_root_ca"
INT_CA_CERT="${INT_CA}.pem"
INT_CA_CERT_PATH="./${INT_CA_CERT}"
ROOT_CA_CERT="${ROOT_CA}.pem"
ROOT_CA_CERT_PATH="./${ROOT_CA_CERT}"
ROOT_CA_INT_CA_BUNDLE_PEM="${APPLICATION}_root_int_ca.pem"
ROOT_CA_INT_CA_BUNDLE_PEM_PATH="./${ROOT_CA_INT_CA_BUNDLE_PEM}"

APPLICATION_KEY_FOR_APACHE="${APPLICATION}_apache_key.pem"
APPLICATION_KEY_FOR_APACHE_PATH="./${APPLICATION_KEY_FOR_APACHE}"
APPLICATION_CRT_FOR_APACHE="${APPLICATION}_apache.crt"
APPLICATION_CRT_FOR_APACHE_PATH="./${APPLICATION_CRT_FOR_APACHE}"
INT_CA_ROOT_CA_INT_CA_CHAIN_FOR_APACHE_PEM="${APPLICATION}_apache_ca_chain.pem"
INT_CA_ROOT_CA_INT_CA_CHAIN_FOR_APACHE_PEM_PATH="./${INT_CA_ROOT_CA_INT_CA_CHAIN_FOR_APACHE_PEM}"

APPLICATION_KEY_FOR_POSTGRESQL="${APPLICATION}_postgres_key.pem"
APPLICATION_KEY_FOR_POSTGRESQL_PATH="./${APPLICATION_KEY_FOR_POSTGRESQL}"
APPLICATION_CRT_FOR_POSTGRESQL="${APPLICATION}_postgres.crt"
APPLICATION_CRT_FOR_POSTGRESQL_PATH="./${APPLICATION_CRT_FOR_POSTGRESQL}"
ROOT_CA_FOR_POSTGRESQL_PEM="${APPLICATION}_postgres_ca_root.pem"
ROOT_CA_FOR_POSTGRESQL_PEM_PATH="./${ROOT_CA_FOR_POSTGRESQL_PEM}"

APPLICATION_CRT_CHAIN_KEY_FOR_HAPROXY="${APPLICATION}_HAProxy_bundle.pem"
APPLICATION_CRT_CHAIN_KEY_FOR_HAPROXY_PATH="./${APPLICATION_CRT_CHAIN_KEY_FOR_HAPROXY}"

APPLICATION_CRT_CHAIN_KEY_FOR_K8S_SECRET="${APPLICATION}_k8s_secret.yaml"
APPLICATION_CRT_CHAIN_KEY_FOR_K8S_SECRET_PATH="./${APPLICATION_CRT_CHAIN_KEY_FOR_K8S_SECRET}"

APPLICATION_CRT_CHAIN_KEY_FOR_ARKCASE_INGRESS="${APPLICATION}_arkcase_ingress.yaml"
APPLICATION_CRT_CHAIN_KEY_FOR_ARKCASE_INGRESS_PATH="./${APPLICATION_CRT_CHAIN_KEY_FOR_ARKCASE_INGRESS}"

# generate SSL cert

if ! ${CONFIG_SET} ; then
	# If a configuration has not been specified, render our own
	cat <<-EOF > "${CONFIG}"
	[ req ]
		default_bits           = ${KEYSIZE}
		default_keyfile        = ${APPLICATION_KEY_PEM}
		distinguished_name     = req_distinguished_name
		attributes             = req_attributes
		req_extensions         = v3_req
		prompt                 = no
		string_mask            = utf8only

	[ req_distinguished_name ]
		C                      = ${COUNTRY}
		ST                     = ${STATE}
		L                      = ${LOCALITY}
		O                      = ${ORGANIZATION}
		OU                     = ${ORGANIZATION_UNIT}
		CN                     = ${CERT_CN[0]}
		emailAddress           = ${EMAIL}

	[ req_attributes ]
		challengePassword      = ${PASSWORD}

	[ v3_req ]
		#Extensions to add to a certificate request

		subjectAltName = @alt_names

	[alt_names]
	$(
		for (( i = 0 ; i < ${#CERT_CN[@]} ; i++ )) ; do
			echo -e "\tDNS.$(( i + 1 )) = ${CERT_CN[${i}]}"
		done
	)
	EOF

fi

# generate the private key
openssl genrsa \
	-out "${APPLICATION_KEY_PEM_PATH}" -aes256 \
	-rand <(openssl rand 1024) \
	-passout file:<(echo -n "${PASSWORD}") \
	${KEYSIZE}

# confirm using openssl rsa -in ${APPLICATION_KEY_PEM_PATH} -inform PEM -noout -text -passin file:$PASSWORD
#echo "wait 2 seconds" ; sleep 2

# Generate CSR for the application
openssl req \
	-new \
	-key "${APPLICATION_KEY_PEM_PATH}" \
	-out "${APPLICATION_CSR_PATH}" \
	-config "${CONFIG}" \
	-passin file:<(echo -n "${PASSWORD}")

# prepare CSR for passing to certsrv web application
APPLICATION_ENCODED_CSR="$(
	hexdump -v -e '1/1 "%02x\t"' -e '1/1 "%_c\n"' < "${APPLICATION_CSR_PATH}" | \
	LANG=C awk '
    		$1 == "20"                      { printf("%s",      "+");   next    }
    		$2 ~  /^[a-zA-Z0-9.*()\/-]$/    { printf("%s",      $2);    next    }
                                    		{ printf("%%%s",    $1)             }
	')"
#APPLICATION_ENCODED_CSR="$(
#	cat "${APPLICATION_CSR_PATH}" | hexdump -v -e '1/1 "%02x\t"' -e '1/1 "%_c\n"' | \
#	LANG=C awk '
#		$1 == "20"			{ printf("%s",      "+");   next    }
#		$2 ~  /^[a-zA-Z0-9.*()\/-]$/	{ printf("%s",      $2);    next    }
#						{ printf("%%%s",    $1)             }'
#)"

# submit CSR to CA; I added the -k switch in case you didn't add the root ca to the Cygwin/Linux server PKI trust store
rm -f "${APPLICATION_CERTSRV_REQ_PATH}" &>/dev/null
curl \
	-k --negotiate -u : \
	-d "CertRequest=${APPLICATION_ENCODED_CSR}" \
	-d "SaveCert=yes" \
	-d "Mode=newreq" \
	-d "CertAttrib=CertificateTemplate:${CERT_TYPE}" \
	-o "${APPLICATION_CERTSRV_REQ_PATH}" \
	"${CA_URL}/certfnsh.asp"

# attempt to derive the cert req ID from the HTML returned upon submitting the CSR
APPLICATION_REQUEST_ID="$(
	grep -m 1 ReqID "${APPLICATION_CERTSRV_REQ_PATH}" | \
	sed -e 's/.*ReqID=\(.*\)&amp.*/\1/g'
)"

if [ -z "${APPLICATION_REQUEST_ID}" ]; then
	echo "Cert request failed; see [${APPLICATION_CERTSRV_REQ_PATH}] for cause"
	exit 1
fi

# need to wait for a few seconds - let's wait for 10
#echo "wait 10 seconds" ; sleep 10

# go retrieve the cert bundle from the CA baseed on the cert req ID
echo "Request ID is [${APPLICATION_REQUEST_ID}]"
rm -f "${APPLICATION_P7B_PATH}" &>/dev/null
curl \
	-k --negotiate -u : \
	-A "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.5) Gecko/2008120122 Firefox/3.0.5" \
	-o "${APPLICATION_P7B_PATH}" \
	"${CA_URL}/certnew.p7b?ReqID=${APPLICATION_REQUEST_ID}&Enc=b64"

#openssl pkcs7 -in $APPLICATION_P7B_PATH -inform PEM -print_certs

# now, we will extract the certificates from the PKCS7 bundle
openssl pkcs7 \
	-in "${APPLICATION_P7B_PATH}" \
	-inform PEM \
	-print_certs | \
	awk '/BEGIN/ { i++; } /BEGIN/, /END/ { print > i ".extracted.crt" }'

mv 1.extracted.crt "${APPLICATION_CRT_PATH}"
mv 2.extracted.crt "${INT_CA_CERT_PATH}"
mv 3.extracted.crt "${ROOT_CA_CERT_PATH}"

# create a PEM file with the root ca and intermediate ca certs in that specific order for openssl to make a PKCS12 bundle
#   random note: the order for this "chain" file has to be the opposite for apache httpd chain files
cat "${ROOT_CA_CERT_PATH}" "${INT_CA_CERT_PATH}" > "${ROOT_CA_INT_CA_BUNDLE_PEM_PATH}"

# Render a PKCS12 keystore
rm -f "${APPLICATION_P12_PATH}" &>/dev/null
openssl pkcs12 \
	-export \
	-in "${APPLICATION_CRT_PATH}" \
	-inkey "${APPLICATION_KEY_PEM_PATH}" \
	-passin file:<(yes "${PASSWORD}" | head -2) \
	-chain \
	-CAfile "${ROOT_CA_INT_CA_BUNDLE_PEM_PATH}" \
	-name "${APPLICATION}" \
	-out "${APPLICATION_P12_PATH}" \
	-passout file:<(yes "${PASSWORD}" | head -2)

if [ -n "${KEYTOOL}" ] ; then
	for STORETYPE in "${KEYSTORE_TYPES[@]}" ; do
		KEYSTORE="./${APPLICATION}.${STORETYPE}_keystore"
		TRUSTSTORE="./${APPLICATION}.${STORETYPE}_truststore"
		rm -f "${KEYSTORE}" "${TRUSTSTORE}" &>/dev/null

		# First, import the PKCS12 keystore
		"${KEYTOOL}" \
			-importkeystore \
			-deststorepass "${PASSWORD}" \
			-destkeystore "${KEYSTORE}" \
			-storetype "${STORETYPE}" \
			-srckeystore "${APPLICATION_P12_PATH}" \
			-srcstoretype PKCS12 \
			-srcstorepass "${PASSWORD}"

		# Now create a truststore
		"${KEYTOOL}" \
			-import \
			-v \
			-noprompt \
			-alias "${ROOT_CA}" \
			-trustcacerts \
			-file "${ROOT_CA_CERT_PATH}" \
			-keystore "${TRUSTSTORE}" \
			-storetype "${STORETYPE}" \
			-storepass "${PASSWORD}"

		"${KEYTOOL}" \
			-import \
			-v \
			-noprompt \
			-alias ${INT_CA} \
			-trustcacerts \
			-file ${INT_CA_CERT_PATH} \
			-keystore "${TRUSTSTORE}" \
			-storetype "${STORETYPE}" \
			-storepass "${PASSWORD}"

		# For a truststore, why do we need the actual certificate?
		"${KEYTOOL}" \
			-import \
			-v \
			-noprompt \
			-alias "${APPLICATION_NAME}" \
			-file "${APPLICATION_CRT_PATH}" \
			-keystore "${TRUSTSTORE}" \
			-storetype "${STORETYPE}" \
			-storepass "${PASSWORD}"
	done
fi

# make the key, copy the cert, and create the CA cert chain bundle for Apache; the same works for MySQL
#   create a PEM file with the intermediate ca and root ca certs in that specific order for Apache httpd
cat "${INT_CA_CERT_PATH}" "${ROOT_CA_CERT_PATH}" > "${INT_CA_ROOT_CA_INT_CA_CHAIN_FOR_APACHE_PEM_PATH}"
#   create a private without a password for Apache httpd

rm -f "${APPLICATION_CRT_FOR_APACHE_PATH}" &>/dev/null
openssl rsa \
	-in "${APPLICATION_KEY_PEM_PATH}" \
	-passin file:<(echo -n "${PASSWORD}") \
	-out "${APPLICATION_KEY_FOR_APACHE_PATH}"
#   copy the cert so that it has the Apache httpd naming
cp -p "${APPLICATION_CRT_PATH}" "${APPLICATION_CRT_FOR_APACHE_PATH}"

# make the key, copy the cert and chain, and create the CA trust cert for PostgreSQL
#   see https://www.postgresql.org/docs/9.2/static/ssl-tcp.html for details
#   create a PEM file with the cert, intermediate ca, and root ca certs in that specific order for the PostgreSQL server cert
cat "${APPLICATION_CRT_PATH}" "${INT_CA_CERT_PATH}" "${ROOT_CA_CERT_PATH}" > "${APPLICATION_CRT_FOR_POSTGRESQL_PATH}"

#   create a private without a password for PsotgreSQL
rm -f "${APPLICATION_KEY_FOR_POSTGRESQL_PATH}" &>/dev/null
openssl rsa \
	-in "${APPLICATION_KEY_PEM_PATH}" \
	-passin file:<(echo -n "${PASSWORD}") \
	-out "${APPLICATION_KEY_FOR_POSTGRESQL_PATH}"
#   copy the root CA cert so that we have a trusted root CA cert file for PostgreSQL
cp -p "${ROOT_CA_CERT_PATH}" "${ROOT_CA_FOR_POSTGRESQL_PEM_PATH}"

# make the key, copy the cert, and create the CA cert chain bundle for HAProxy
#   create a PEM file with the Apache cert, chain, and key in a specific order for HAProxy for placement under <root>/etc/haproxy/combo in the format of <FQDN>.pem
cat "${APPLICATION_CRT_FOR_APACHE_PATH}" "${INT_CA_ROOT_CA_INT_CA_CHAIN_FOR_APACHE_PEM_PATH}" "${APPLICATION_KEY_FOR_APACHE_PATH}" > "${APPLICATION_CRT_CHAIN_KEY_FOR_HAPROXY_PATH}"

cat <<EOF > "${APPLICATION_CRT_CHAIN_KEY_FOR_K8S_SECRET_PATH}"
apiVersion: v1
kind: Secret
metadata:
  name: "k8s-tls-secret"
  namespace: "default"
type: "kubernetes.io/tls"
data:
  tls.key: |-
$(sed -e 's;^;    ;g' < "${APPLICATION_KEY_FOR_APACHE_PATH}")
  tls.crt: |-
$(sed -e 's;^;    ;g' < "${APPLICATION_CRT_FOR_APACHE_PATH}")
  ca.crt: |-
$(sed -e 's;^;    ;g' < "${INT_CA_ROOT_CA_INT_CA_CHAIN_FOR_APACHE_PEM_PATH}")
EOF

cat <<EOF > "${APPLICATION_CRT_CHAIN_KEY_FOR_ARKCASE_INGRESS_PATH}"
global:
  ingress:
    enabled: true
    secret:
      crt: |-
$(sed -e 's;^;        ;g' < "${APPLICATION_CRT_FOR_APACHE_PATH}")
      key: |-
$(sed -e 's;^;        ;g' < "${APPLICATION_KEY_FOR_APACHE_PATH}")
      ca: |-
$(sed -e 's;^;        ;g' < "${INT_CA_ROOT_CA_INT_CA_CHAIN_FOR_APACHE_PEM_PATH}")
EOF

if [ -n "${KEYTOOL}" ] && [ "${#KEYSTORE_TYPES[@]}" -gt 0 ] ; then
	for STORETYPE in "${KEYSTORE_TYPES[@]}" ; do
		KEYSTORE="./${APPLICATION}.${STORETYPE}_keystore"
		TRUSTSTORE="./${APPLICATION}.${STORETYPE}_truststore"
		# validate the new keystore
		KEYSTORE_OUTPUT="$(
			"${KEYTOOL}" -list -v \
				-keystore "${KEYSTORE}" \
				-storetype "${STORETYPE}" \
				-storepass "${PASSWORD}"
		)"
		"${KEYTOOL}" -list \
			-keystore "${KEYSTORE}" \
			-storetype "${STORETYPE}" \
			-storepass "${PASSWORD}"
		grep "^Owner:" <<< "${KEYSTORE_OUTPUT}"
		grep "  DNSName:" <<< "${KEYSTORE_OUTPUT}"

		# validate the new truststore
		TRUSTSTORE_OUTPUT="$(
			"${KEYTOOL}" -list -v \
				-keystore "${TRUSTSTORE}" \
				-storetype "${STORETYPE}" \
				-storepass "${PASSWORD}"
		)"
		"${KEYTOOL}" -list \
			-keystore "${TRUSTSTORE}" \
			-storetype "${STORETYPE}" \
			-storepass "${PASSWORD}"
		grep "^Owner:" <<< "${TRUSTSTORE_OUTPUT}"
		grep "  DNSName::" <<< "${TRUSTSTORE_OUTPUT}"

		break
	done

	# Check if the JRE cacerts has the root CA cert - this doesn't work with Cygwin
	"${KEYTOOL}"  \
		-list \
		-v \
		-keystore "${JAVA_HOME}/jre/lib/security/cacerts"  \
		-storetype JKS \
		-storepass changeit | grep -i pki
fi

# if you do not see anything returned, and if you have the rights, you can add the root ca cert to the JRE keystore by doing the following:
# ${JAVA_HOME}/bin/keytool -v -import -keystore "${JAVA_HOME}/jre/lib/security/cacerts" -storetype JKS -storepass changeit -trustcacerts -alias ${ROOT_CA} -file ${ROOT_CA_CERT_PATH}
