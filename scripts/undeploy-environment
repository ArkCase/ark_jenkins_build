#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"

set -euo pipefail

[ -v UNDEPLOY_TIMEOUT ] || UNDEPLOY_TIMEOUT=""
[ -n "${UNDEPLOY_TIMEOUT}" ] || UNDEPLOY_TIMEOUT="20m"

[ -v DISABLE_UNDEPLOY ] || DISABLE_UNDEPLOY=""
case "${DISABLE_UNDEPLOY,,}" in
	true | t | yes | y ) DISABLE_UNDEPLOY="true" ;;
	* ) DISABLE_UNDEPLOY="false" ;;
esac
export DISABLE_UNDEPLOY

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

warn()
{
	say "⚠️ ${@}"
}

err()
{
	say "❌ ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

should_uninstall()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"

	local STATUS=""

	# Have to split this or our logic won't work
	STATUS="$(helm status "${RELEASE}" --namespace "${NAMESPACE}" -o json)" || return ${?}

	# Can be one of: unknown, deployed, uninstalled,
	# superseded, failed, uninstalling, pending-install,
	# pending-upgrade or pending-rollback
	local RESULT="$(jq -r '.info.status' <<< "${STATUS}")"
	case "${RESULT,,}" in
		uninstalled ) return 1 ;;
		* ) return 0 ;;
	esac
}

is_valid_name()
{
	local STR="${1}"
	[[ "${STR}" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || return 1
	return 0
}

execute()
{
	#
	# Show the command about to be executed
	#
	say "${@@Q}"
	if "${DISABLE_UNDEPLOY}" ; then
		warn "Undeployment disabled: skipping the command execution"
		return 0
	fi

	#
	# Proceed with the execution
	#
	( exec "${@}" )
	return ${?}
}

is_namespace_exists()
{
	local NAMESPACE="${1}"
	execute kubectl get namespace "${NAMESPACE}" &>/dev/null || return ${?}
	return 0
}

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} [namespace] release" 1>&2
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

if [ ${#} -eq 1 ] ; then
	NAMESPACE="$(kubectl config view --minify -o jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
else
	NAMESPACE="${1}"
	shift
fi
is_valid_name "${NAMESPACE}" || fail "Invalid namespace name [${NAMESPACE}]"

RELEASE="${1}"
is_valid_name "${RELEASE}" || fail "Invalid release name [${RELEASE}]"

# If the target namespace doesn't exist, by extension the environment doesn't exist
if ! is_namespace_exists "${NAMESPACE}" ; then
	say "The namespace ${NAMESPACE} does not exist, so nothing to remove"
	exit 0
fi

if ! should_uninstall "${NAMESPACE}" "${RELEASE}" ; then
	say "The Helm deployment ${RELEASE} was not found in the ${NAMESPACE} namespace"
	exit 0
fi

# Try to downscale first...
DISABLE_DOWNSCALE="${DISABLE_UNDEPLOY}" "${BASEDIR}/downscale-environment" "${NAMESPACE}" "${RELEASE}" || exit ${?}

# Delete the old installation, since it's the safest bet to ensure
# that the correct resources, containers, and deployments are used
execute \
	helm uninstall "${RELEASE}" \
		--namespace "${NAMESPACE}" \
		--keep-history \
		--cascade foreground \
		--wait \
		--timeout "${UNDEPLOY_TIMEOUT}" || \
	fail "The Helm undeployment has failed, please review the logs"

# All is well... exit!
exit 0
