#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"

set -euo pipefail
. /.functions

set_or_default UNDEPLOY_TIMEOUT "20m"

set_as_boolean DISABLE_UNDEPLOY
export DISABLE_UNDEPLOY

set_as_boolean WAIT_FOR_ATTACHMENTS
export WAIT_FOR_ATTACHMENTS

set_as_boolean DOWNSCALE_UNDEPLOY_FIRST
export DOWNSCALE_UNDEPLOY_FIRST

should_uninstall()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"

	local STATUS=""

	# Have to split this or our logic won't work
	STATUS="$(helm status "${RELEASE}" --namespace "${NAMESPACE}" -o json)" || return ${?}

	# Can be one of: unknown, deployed, uninstalled,
	# superseded, failed, uninstalling, pending-install,
	# pending-upgrade or pending-rollback
	local RESULT="$(jq -r '.info.status' <<< "${STATUS}")"
	case "${RESULT,,}" in
		uninstalled ) return 1 ;;
		* ) return 0 ;;
	esac
}

execute()
{
	execute_unless DISABLE_UNDEPLOY "${@}"
	return ${?}
}

is_namespace_exists()
{
	local NAMESPACE="${1}"
	execute kubectl get namespace "${NAMESPACE}" &>/dev/null || return ${?}
	return 0
}

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} [namespace] release" 1>&2
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

if [ ${#} -eq 1 ] ; then
	NAMESPACE="$(kubectl config view --minify -o jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
else
	NAMESPACE="${1}"
	shift
fi
is_valid_hostname_part "${NAMESPACE}" || fail "Invalid namespace name [${NAMESPACE}]"

RELEASE="${1}"
is_valid_hostname_part "${RELEASE}" || fail "Invalid release name [${RELEASE}]"

# If the target namespace doesn't exist, by extension the environment doesn't exist
if ! is_namespace_exists "${NAMESPACE}" ; then
	say "The namespace ${NAMESPACE} does not exist, so nothing to remove"
	exit 0
fi

if ! should_uninstall "${NAMESPACE}" "${RELEASE}" ; then
	say "The Helm deployment ${RELEASE} was not found in the ${NAMESPACE} namespace"
	exit 0
fi

# Try to downscale first...?
if as_boolean "${DOWNSCALE_UNDEPLOY_FIRST}" ; then
	DOWNSCALE_TIMEOUT="${UNDEPLOY_TIMEOUT}" \
	DISABLE_DOWNSCALE="${DISABLE_UNDEPLOY}" \
	"${BASEDIR}/downscale-environment" "${NAMESPACE}" "${RELEASE}" || exit ${?}
fi

# Delete the old installation, since it's the safest bet to ensure
# that the correct resources, containers, and deployments are used
execute \
	helm uninstall "${RELEASE}" \
		--namespace "${NAMESPACE}" \
		--keep-history \
		--cascade foreground \
		--wait \
		--timeout "${UNDEPLOY_TIMEOUT}" || \
	fail "The Helm undeployment has failed, please review the logs"

# We don't care what happens here, really ...
if as_boolean "${WAIT_FOR_ATTACHMENTS}" ; then
	ATTACHMENT_WAIT_TIMEOUT="${UNDEPLOY_TIMEOUT}" \
	DISABLE_ATTACHMENT_WAIT="${DISABLE_UNDEPLOY}" \
	"${BASEDIR}/wait-for-pvc-attachments" "${NAMESPACE}" "${RELEASE}" || \
	true

	# This should help clean up any stragglers
	if is_valid_hostname_part "${SOURCE_CLUSTER:-}" ; then
		DETACHMENT_WAIT_TIMEOUT="${UNDEPLOY_TIMEOUT}" \
		DISABLE_DETACHMENT_WAIT="${DISABLE_UNDEPLOY}" \
		"${BASEDIR}/wait-for-volumes-to-detach" "${SOURCE_CLUSTER}" "${NAMESPACE}" "${RELEASE}" || \
		true
	fi
fi

# All is well... exit!
exit 0
