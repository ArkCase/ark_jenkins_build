#!/bin/bash

set -euo pipefail
. /.functions

usage()
{
	[ ${#} -eq 0 ] || echo -e "‚ùå ${@}\n"
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} [ -R | --repo repository ] workflow runId"
	exit 1
}

ARGS="$(getopt -o "R:h?" -l "help,repo:" -n "${BASH_ARGV0:-${BASH_SOURCE:-${0}}}" -- "${@}")" || usage

eval set -- "${ARGS}"

REPO=()
REPO_SET="false"

while true ; do
	case "${1}" in
		-R | --repo )
			as_boolean "${REPO_SET}" && fail "You may specify ${1} only once"
			[ -n "${2}" ] || fail "The repository may not be the empty string (${1})"
			REPO=(--repo "${2}")
			REPO_SET="true"
			shift 2
			continue
			;;

		--help | -h | "-?" ) usage ;;

		-- ) shift ; break ;;

		* ) usage ;;
	esac
done

[ ${#} -eq 2 ] || usage

WORKFLOW="${1}"
[ -n "${WORKFLOW}" ] || usage "The workflow may not be an empty string"
RUN_ID="${2}"
[ -n "${RUN_ID}" ] || usage "The runId may not be an empty string"

GH_USER_FLAGS=()
[ -v GH_WORKFLOW_USER ] && [ "${GH_WORKFLOW_USER:-""}" ] && GH_USER_FLAGS=(--user "${GH_WORKFLOW_USER}")

# Wait for the run to complete
STATUS="$(gh run list "${REPO[@]}" --workflow "${WORKFLOW}" --json databaseId,status,conclusion --jq ".[] | select(.databaseId == ${RUN_ID})")"
[ -n "${STATUS}" ] || fail "No run found for ${WORKFLOW} with ID = ${RUN_ID}"

echo -n "${STATUS,,}"
exit 0
