#!/bin/bash
SCRIPT="$(/usr/bin/readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(/usr/bin/dirname "${SCRIPT}")"
SCRIPT="$(/usr/bin/basename "${SCRIPT}")"

FUNCTIONS="${BASEDIR}/.functions"
if ! . "${FUNCTIONS}" ; then
	echo -e "ERROR: Failed to load the base functions from [${FUNCTIONS}]"
	exit 1
fi
unset FUNCTIONS

usage() {
	echo -e "usage: ${BASH_ARGV0} [directory]"
	exit 1
}

[ ${#} -gt 1 ] && usage

SRC_DIR="."
SRC_FILE=".gitflow"

[ ${#} -eq 1 ] && SRC_DIR="${1}"

[ -e "${SRC_DIR}" ] || fail "The directory [${SRC_DIR}] does not exist"
[ -d "${SRC_DIR}" ] || fail "The path [${SRC_DIR}] is not a directory"
[ -x "${SRC_DIR}" ] || fail "The directory [${SRC_DIR}] is not executable"

SRC_DIR="$(readlink -e "${SRC_DIR}")"

cd "${SRC_DIR}" || fail "Failed to CD into [${SRC_DIR}]"

say "Checking git status..."
/usr/bin/git -C "${SRC_DIR}" rev-parse || exit ${?}

CONFIG="${SRC_DIR}/${SRC_FILE}"
if [ -f "${CONFIG}" ] ; then
	# Apply all the keys set in the ${CONFIG} file
	while read key rest ; do
		# If it exists, clear it out
		if /usr/bin/git config "${key}" &>/dev/null ; then
			/usr/bin/git config --unset "${key}" || fail "Failed to clear the configuration key [${key}]"
		fi

		# We do it like this to support multivalued configurations
		while read value ; do
			/usr/bin/git config --add "${key}" "${value}" || fail "Failed to add the value [${value}] to the configuration key [${key}]"
		done < <(/usr/bin/git config --file "${CONFIG}" --get-all "${key}")
	done < <(/usr/bin/git config --file "${CONFIG}" --get-regexp '^gitflow.*$')
elif [ -e "${CONFIG}" ] ; then
	echo -e "WARNING: The configuration path [${CONFIG}] is not a regular file, ignoring it."
fi

exec /usr/bin/git flow init --showcommands -d
