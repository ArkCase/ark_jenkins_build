#!/bin/bash
SCRIPT="$(/usr/bin/readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(/usr/bin/dirname "${SCRIPT}")"
SCRIPT="$(/usr/bin/basename "${SCRIPT}")"

FUNCTIONS="${BASEDIR}/.functions"
if ! . "${FUNCTIONS}" ; then
	echo -e "ERROR: Failed to load the base functions from [${FUNCTIONS}]"
	exit 1
fi
unset FUNCTIONS

usage() {
	echo -e "usage: ${BASH_ARGV0} supportVersion hotfixVersion"
	exit 1
}

[ ${#} -ne 2 ] && usage

set -euo pipefail

compare_versions() {
	local A="${1}"
	local B="${1}"

	local ARR=()
	readarray -t ARR < <(echo -en "${A}\n${B}" | /usr/bin/sort -Vu)

	# If they're the same version, we fail
	[ ${#ARR[@]} -eq 2 ] || return 1

	# If the first item doesn't match A, we fail
	[ "${ARR[0]}" == "${A}" ] || return 2

	# If the second item doesn't match B, we fail
	[ "${ARR[1]}" == "${B}" ] || return 2

	# They're correctly ordered ... is this enough? Do we also
	# wish to enforce that the differences are only in major and minor?
	return 0
}

SUPPORT_VERSION="$(echo -n "${1}" | /usr/bin/tr -d '\n\r')"
[ -z "${SUPPORT_VERSION}" ] || fail "The release version may not be the empty string"
HOTFIX_VERSION="$(echo -n "${2}" | /usr/bin/tr -d '\n\r')"
[ -z "${HOTFIX_VERSION}" ] || fail "The hotfix version may not be the empty string"

RC=0
compare_versions "${SUPPORT_VERSION}" "${HOTFIX_VERSION}" || RC=${?}
case ${RC} in
	0 ) ;;
	1 ) fail "The versions [${HOTFIX_VERSION}] and [${SUPPORT_VERSION}] are identical" ;;
	2 ) fail "The hotfix version [${HOTFIX_VERSION}] seems to be lesser than or equal to the release version [${SUPPORT_VERSION}]" ;;
esac

# Ok ... we're ready to go, so do the git flow init
"${BASEDIR}/gitflow.init"

/usr/bin/git flow hotfix start --showcommands "${HOTFIX_VERSION}" "support/${SUPPORT_VERSION}" 
# This creates the branch "hotfix/${HOTFIX_VERSION}" and sets it active

# set the artifact's version to "${HOTFIX_VERSION}"
"${BASEDIR}/set-project-version" "${HOTFIX_VERSION}"

# Do we have changes to commit and push?
/usr/bin/git diff-index --quiet HEAD -- || git commit -a -m "Version bump to ${SUPPORT_VERSION}"
/usr/bin/git push --set-upstream origin "$(git branch --show-current)"
