#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

err()
{
	say "❌ ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_valid_name()
{
	local STR="${1}"
	[[ "${STR}" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || return 1
	return 0
}

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} [namespace] secret-name" 1>&2
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

if [ ${#} -eq 1 ] ; then
	NAMESPACE="$(kubectl config view --minify -o jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
else
	NAMESPACE="${1}"
	shift
fi
is_valid_name "${NAMESPACE}" || fail "Invalid namespace name [${NAMESPACE}]"

SECRET_NAME="${1}"
is_valid_name "${SECRET_NAME}" || fail "The secret name [${SECRET_NAME}] is invalid"

[ -v DOCKER_CONFIG ] || DOCKER_CONFIG=""
[ -n "${DOCKER_CONFIG}" ] || DOCKER_CONFIG="${HOME}/.docker"

say "👉 Docker configuration expected at [${DOCKER_CONFIG}]"
DOCKER_CONFIG="$(readlink -f "${DOCKER_CONFIG}")" || fail "Failed to canonicalize the docker configuration path"
DOCKER_CONFIG+="/config.json"
[ -f "${DOCKER_CONFIG}" ] || fail "No docker login configuration available at [${DOCKER_CONFIG}] - cannot continue!"

say "👉 Creating the Kubernetes secret ${SECRET_NAME} in namespace ${NAMESPACE}"
kubectl get node &>/dev/null || fail "No access to the K8s cluster, cannot continue"

# Ensure the namespace exists
kubectl get namespace "${NAMESPACE}" &>/dev/null || \
	kubectl create namespace "${NAMESPACE}" || \
	fail "Failed to create the required namespace [${NAMESPACE}]"

say "👉 Creating Kubernetes secret (${SECRET_NAME}) for [${DOCKER_CONFIG}] in namespace [${NAMESPACE}]..."

# Delete the existing secret, if necessary
kubectl delete secret \
	--namespace "${NAMESPACE}" \
	"${SECRET_NAME}" &>/dev/null || true

# Create the replacement secret
kubectl create secret \
	generic \
	--namespace "${NAMESPACE}" \
	"${SECRET_NAME}" \
	--from-file=".dockerconfigjson=${DOCKER_CONFIG}" \
	--type="kubernetes.io/dockerconfigjson" || fail "ERROR: Failed to create the secret ${SECRET_NAME} in namespace ${NAMESPACE} (rc = ${?})"

say "✅ Secret created!"
exit 0
