#!/bin/bash
SCRIPT="$(/usr/bin/readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(/usr/bin/dirname "${SCRIPT}")"
SCRIPT="$(/usr/bin/basename "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	/usr/bin/date -Ins -u
}

say() {
	echo -e "$(timestamp): ${@}"
}

fail() {
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

KUBECTL="$(type -P kubectl 2>/dev/null)" || fail "The 'kubectl' executable is not in the path - cannot continue"

if [ ! -v KUBECONFIG ] ; then
	[ -v K8S_CONFIG ] && export KUBECONFIG="${!K8S_CONFIG}"
fi

[ -v K8S_SECRET ] || K8S_SECRET="aws-arkcase-pull"
[[ "${K8S_SECRET}" =~ ^[a-zA-Z0-9]([a-zA-Z0-9\-]*[a-zA-Z0-9])?$ ]] || fail "The secret name [${K8S_SECRET}] is invalid"

[ -v NAMESPACE ] || NAMESPACE=""
[ -n "${NAMESPACE}" ] || NAMESPACE="default"

[ -v DOCKER_CONFIG ] || DOCKER_CONFIG="${HOME}/.docker"
say "👉 Docker configuration expected at [${DOCKER_CONFIG}]"
DOCKER_CONFIG="$(/usr/bin/readlink -f "${DOCKER_CONFIG}")" || fail "Failed to canonicalize the docker configuration path"
DOCKER_CONFIG+="/config.json"
[ -f "${DOCKER_CONFIG}" ] || fail "No docker login configuration available at [${DOCKER_CONFIG}] - cannot continue!"

say "👉 Creating the Kubernetes secret ${K8S_SECRET} in namespace ${NAMESPACE}"

"${KUBECTL}" get node &>/dev/null || fail "No access to the K8s cluster, cannot continue"

# Ensure the namespace exists
"${KUBECTL}" get namespace "${NAMESPACE}" &>/dev/null || \
	"${KUBECTL}" create namespace "${NAMESPACE}" || \
	fail "Failed to create the required namespace [${NAMESPACE}]"

say "👉 Creating Kubernetes secret (${K8S_SECRET}) for [${DOCKER_CONFIG}] in namespace [${NAMESPACE}]..."

# Delete the existing secret, if necessary
"${KUBECTL}" delete secret \
	--namespace "${NAMESPACE}" \
	"${K8S_SECRET}" &>/dev/null || true

# Create the replacement secret
"${KUBECTL}" create secret \
	generic \
	--namespace "${NAMESPACE}" \
	"${K8S_SECRET}" \
	--from-file=".dockerconfigjson=${DOCKER_CONFIG}" \
	--type="kubernetes.io/dockerconfigjson" || fail "ERROR: Failed to create the secret ${K8S_SECRET} in namespace ${NAMESPACE} (rc = ${?})"

say "\t✅ Secret created!"
say "✅ Login complete"
exit 0
