#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"

set -euo pipefail

[ -v DISABLE_VALIDATE ] || DISABLE_VALIDATE=""
case "${DISABLE_VALIDATE,,}" in
	true | t | yes | y ) DISABLE_VALIDATE="true" ;;
	* ) DISABLE_VALIDATE="false" ;;
esac
export DISABLE_VALIDATE

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

warn()
{
	say "‚ö†Ô∏è ${@}"
}

err()
{
	say "‚ùå ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_deployed()
{
	local NAMESPACE="${1}"
	local RELEASE="${2}"
	execute helm get --namespace "${NAMESPACE}" all "${RELEASE}" &>/dev/null
	return ${?}
}

is_valid_name()
{
	local STR="${1}"
	[[ "${STR}" =~ ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$ ]] || return 1
	return 0
}

execute()
{
	#
	# Show the command about to be executed
	#
	say "${@@Q}"
	if "${DISABLE_VALIDATE}" ; then
		warn "Deployment disabled: skipping the command execution"
		return 0
	fi

	#
	# Proceed with the execution
	#
	( exec "${@}" )
	return ${?}
}

usage()
{
	echo -e "usage: ${BASH_SOURCE:-${0}} [namespace] release" 1>&2
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

if [ ${#} -eq 1 ] ; then
	NAMESPACE="$(kubectl config view --minify -o jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
else
	NAMESPACE="${1}"
	shift
fi
is_valid_name "${NAMESPACE}" || fail "Invalid namespace name [${NAMESPACE}]"

RELEASE="${1}"
is_valid_name "${RELEASE}" || fail "Invalid release name [${RELEASE}]"

# Delete the old installation, since it's the safest bet to ensure
# that the correct resources, containers, and deployments are used
is_deployed "${NAMESPACE}" "${RELEASE}" || fail "The release [${RELEASE}] is not deployed into namespace [${NAMESPACE}] ... can't validate it"

# Delete any prior test pods
say "üëâ Deleting any existing test pods"
execute \
	kubectl delete pod \
		--namespace "${NAMESPACE}" \
		--wait \
		--now \
		--cascade=foreground \
		--selector="app.kubernetes.io/instance=${RELEASE},arkcase.com/task=test" || \
	say "\t‚ö†Ô∏è No prior test pods to delete"

# Execute the helm test containers, to make sure everything
# that needs to be running, is actually running correctly
say "üëâ Launching the Helm validation"
# Apparently, --logs has an issue where cleanup will happen before the logs
# are retrieved, so we're going to skip that for now
execute \
	helm test \
		"${RELEASE}" \
		--namespace "${NAMESPACE}" || \
	fail "The Helm deployment verification failed, please review the logs"
say "\t‚úÖ Helm deployment verified!"
