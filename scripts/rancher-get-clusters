#!/bin/bash
SCRIPT="$(/usr/bin/readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(/usr/bin/dirname "${SCRIPT}")"

set -euo pipefail

timestamp()
{
	/usr/bin/date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

fail()
{
	say "❌ ${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

auth_params()
{
	local USER="${1}"
	local PASS=""

	if [ ${#} -eq 1 ] ; then
		[[ "${USER}" =~ ^([^:]*)(:(.*))?$ ]] || true
		USER="${BASH_REMATCH[1]}"
		PASS="${BASH_REMATCH[3]}"
	else
		PASS="${2}"
	fi

	"${CAT}" <<-EOF
	user "${USER}:${PASS}"
	EOF
}

#
# Make sure we're given a solid token
#
[ -v RANCHER_TOKEN ] || RANCHER_TOKEN=""
[ -n "${RANCHER_TOKEN}" ] || fail "Must provide a non-empty RANCHER_TOKEN value"
[[ "${RANCHER_TOKEN}" =~ ^[a-zA-Z0-9_-]+:.+$ ]] || fail "The RANCHER_TOKEN format is invalid"

#
# Allow for a configurable API endpoint, just in case...
#
[ -v RANCHER_API_URL ] || RANCHER_API_URL=""
[ -n "${RANCHER_API_URL}" ] || RANCHER_API_URL="https://rancher.armedia.com"

# Remove trailing slashes from the URL
[[ "${RANCHER_API_URL}" =~ ^(.*)/*$ ]] || fail "Invalid Rancher API URL [${RANCHER_API_URL}]"
RANCHER_API_ENDPOINT="${BASH_REMATCH[0]}/v3/clusters"

CURL="$(type -P curl)" || fail "Could not find 'curl' in the path"
SORT="$(type -P sort)" || fail "Could not find 'sort' in the path"
JQ="$(type -P jq)" || fail "Could not find 'jq' in the path"
CAT="$(type -P cat)" || fail "Could not find 'cat' in the path"

LIST="$("${CURL}" -fsSL --config <(auth_params "${RANCHER_TOKEN}") "${RANCHER_API_ENDPOINT}" | "${JQ}" -r ".data[] | .id + \" \" + .name")" || fail "Failed to query the cluster list (rc=${?})"
echo "${LIST}" | "${SORT}" -k 2
exit 0
