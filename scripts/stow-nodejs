#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"
SCRIPT="$(basename "${SCRIPT}")"

set -euo pipefail
. /.functions

set_as_boolean DISABLE_DEPLOY

usage()
{
	echo -e "usage: ${BASH_ARGV0} scope"
	exit 1
}

[ ${#} -ne 1 ] && usage

SCOPE="${1}"
[[ "${SCOPE}" =~ ^@[^[:space:]]+$ ]] || fail "Invalid scope format: [${SCOPE}] - must match @scope-name"

[ -z "${STOW_URL}" ] && fail "The STOW_URL variable is empty"
[[ "${STOW_URL}" =~ ^https?://[-a-zA-Z0-9]+(\.[-a-zA-Z0-9]+)*(/.*)?$ ]] || fail "The STOW_URL value [${STOW_URL}] is not a valid URL"

if as_boolean "${DISABLE_DEPLOY}" ; then
	echo -e "Deployment is disabled - skipping scope [${SCOPE}] to ${STOW_URL}!"
	exit 0
fi

set_or_default LERNA_FILE "lerna.json"
if is_file_readable "${LERNA_FILE}" ; then
	say "No lerna configuration found at [${LERNA_FILE}], cannot deploy"
	exit 0
fi

STOW_AUTH="$(echo -n "${STOW_USER}:${STOW_PASS}" | base64)"

# Remove the scheme, if present...
STOW_PREFIX="${STOW_URL}"
[[ "${STOW_PREFIX}" =~ ^https?:(//.*) ]] && STOW_PREFIX="${BASH_REMATCH[1]}"
# Add a final slash, if necessary
[[ "${STOW_PREFIX}" =~ /$ ]] || STOW_PREFIX+="/"

npm config set "${SCOPE}:registry=${STOW_URL}"
npm config set "${STOW_PREFIX}:_auth=${STOW_AUTH}"

#
# Temporary fix to get lerna working again
#
__NODE_MODULES="${WORKSPACE}/node_modules"
if [ -d "${__NODE_MODULES}" ] ; then
	export PATH="${__NODE_MODULES}/.bin:${PATH}"
	export NODE_PATH="${__NODE_MODULES}:${NODE_PATH}"
fi
unset __NODE_MODULES

execute lerna exec -- "npm publish --scope=${SCOPE}"
