#!/bin/bash

set -euo pipefail

ATTACHMENT_RESOURCE="volumeattachments.storage.k8s.io"

[ -v ATTACHMENT_WAIT_TIMEOUT ] || ATTACHMENT_WAIT_TIMEOUT=""
[ -n "${ATTACHMENT_WAIT_TIMEOUT}" ] || ATTACHMENT_WAIT_TIMEOUT="20m"

[ -v DISABLE_ATTACHMENT_WAIT ] || DISABLE_ATTACHMENT_WAIT=""
case "${DISABLE_ATTACHMENT_WAIT,,}" in
	true | t | yes | y ) DISABLE_ATTACHMENT_WAIT="true" ;;
	* ) DISABLE_ATTACHMENT_WAIT="false" ;;
esac
export DISABLE_ATTACHMENT_WAIT

timestamp()
{
	date -Ins -u
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "‚úÖ ${@}"
}

warn()
{
	say "‚ö†Ô∏è ${@}"
}

err()
{
	say "‚ùå ${@}"
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_valid_name()
{
	local NAME="${1}"
	[[ "${NAME}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]] || return 1
	return 0
}

execute()
{
	#
	# Show the command about to be executed
	#
	say "${@@Q}"
	if "${DISABLE_ATTACHMENT_WAIT}" ; then
		warn "Attachment waiting disabled: skipping the command execution"
		return 0
	fi

	#
	# Proceed with the execution
	#
	( exec "${@}" )
	return ${?}
}

#
# This function returns the number that serves as
# a multiplier/divisor for a given time scale
#
get_time_mul()
{
	local TAG="${1^^}"

	[[ "${TAG}" =~ ^[HDMS]$ ]] || return 1
	local DURATION_S=1
	local DURATION_M=$(( DURATION_S * 60 ))
	local DURATION_H=$(( DURATION_M * 60 ))
	local DURATION_D=$(( DURATION_H * 24 ))

	local VAR="DURATION_${TAG}"
	echo -n "${!VAR}"
}

#
# This function converts numbers of seconds into
# K8s timespecs, but leaves timespec strings alone
#
secs_to_timestr()
{
	local STR="${1}"
	local NUM="(0|[1-9][0-9]*)"

	[ -n "${STR}" ] || return 1

	# If it's already a time string, return it
	if [[ "${STR^^}" =~ ^(${NUM}D)?(${NUM}H)?(${NUM}M)?(${NUM}S)?$ ]] ; then
		echo -n "${STR,,}"
		return 0
	fi

	[[ "${STR}" =~ ^${NUM}$ ]] || return 1

	local RET=""
	local SIZE=0
	local MUL=0
	local SECS=${STR}
	for C in D H M S ; do
		MUL=$(get_time_mul "${C}")
		(( SIZE = ( SECS / MUL ) ))
		[ ${SIZE} -gt 0 ] && RET+="${SIZE}${C}"
		(( SECS -= ( SIZE * MUL ) ))
	done

	echo -n ${RET,,}
	return 0
}

#
# This function converts K8s timespecs into
# numbers of seconds, but leaves numbers alone
#
timestr_to_secs()
{
	local STR="${1}"
	local NUM="(0|[1-9][0-9]*)"

	# If it's a straight-up number,
	# seconds already, so just return it
	if [[ "${STR}" =~ ^${NUM}$ ]] ; then
		echo -e "${STR}"
		return 0
	fi

	# It could be a time string, so parse it out
	[ -n "${STR}" ] || return 1
	[[ "${STR^^}" =~ ^(${NUM}D)?(${NUM}H)?(${NUM}M)?(${NUM}S)?$ ]] || return 1

	local PARTS=( "${BASH_REMATCH[@]:1}" )
	[ ${#PARTS[@]} -ge 1 ] || return 1

	local SIZE=0
	local MUL=0
	local SECS=0
	for (( i = 0 ; i < ${#PARTS[@]} ; i++ )) ; do
		[[ "${PARTS[i]}" =~ ^${NUM}([DHMS])$ ]] || continue
		SIZE=${BASH_REMATCH[1]}
		MUL=$(get_time_mul "${BASH_REMATCH[2]}")
		(( SECS += SIZE * MUL ))
	done

	echo -n ${SECS}
	return 0
}

is_attachment_valid()
{
	local ATTACHMENT="${1}"
	local PVC_INFO="${2}"
	local PV_INFO="${3}"
	local ATTACHMENT_INFO="${4}"
	local NODE_INFO="${5}"

	local ATTACHED=""
	local NODE=""

	read ATTACHED NODE < <(jq -r '(.status.attached | tostring) + " " + .spec.nodeName' <<< "${ATTACHMENT_INFO}")
	if [ -z "${ATTACHED}" ] || [ -z "${NODE}" ] ; then
		# No node info?!?
		say "\t‚ùå the attachment [${ATTACHMENT}] has no node information..."
		return 1
	fi

	if [ -z "${NODE_INFO}" ] ; then
		say "\t‚ùå ${ATTACHMENT} üîó ${NODE} is missing"
		return 1
	fi

	# Node is OK ... do we want to try to hunt down the pod that are using
	# its PVC? If those pods are down, perhaps this attachment can be deleted?
	say "\t‚úÖ ${ATTACHMENT} üîó ${NODE}"
	return 0
}

usage()
{
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} [namespace] release"
	exit 1
}

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

ATTACHMENT_WAIT_TIMEOUT=$(timestr_to_secs "${ATTACHMENT_WAIT_TIMEOUT}") || fail "Invalid value for ATTACHMENT_WAIT_TIMEOUT: [${ATTACHMENT_WAIT_TIMEOUT}]"

if [ ${#} -eq 2 ] ; then
	NAMESPACE="${1}"
	shift
elif [ ! -v NAMESPACE ] ; then
	NAMESPACE="$(kubectl config view --minify -o jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
fi
is_valid_name "${NAMESPACE}" || fail "The NAMESPACE value [${NAMESPACE}] is not valid"

RELEASE="${1}"
is_valid_name "${RELEASE}" || fail "The RELEASE value [${RELEASE}] is not valid"

kubectl get namespace "${NAMESPACE}" &>/dev/null || fail "The namespace [${NAMESPACE}] does not exist"

ATTACHMENT_WAIT_TIMEOUT_STR="$(secs_to_timestr "${ATTACHMENT_WAIT_TIMEOUT}")"
say "‚åõ Waiting for the volume attachments to be released (up to ${ATTACHMENT_WAIT_TIMEOUT_STR} total)..."
PREVIOUS_RUN=()
START="$(date +%s)"

# Get all the PVCs in the currently default namespace
say "üëÄ Fetching all the PVC data on the namespace ${NAMESPACE} for release ${RELEASE}..."
PVC_DATA="$(kubectl get --namespace "${NAMESPACE}" pvc --selector="app.kubernetes.io/instance=${RELEASE}" -o json)"
say "üëÄ Fetching all the PV data on cluster..."
PV_DATA="$(kubectl get pv -o json)"
say "üëÄ Fetching all the Node data on the cluster..."
NODE_DATA="$(kubectl get node -o json)"

PVC_COUNT="$(jq -r ".items | length" <<< "${PVC_DATA}")"

ok "Found ${PVC_COUNT} PVCs"
[ ${PVC_COUNT} -gt 0 ] || exit 0

readarray -t PVCS < <(jq -r ".items[] | .metadata.name" <<< "${PVC_DATA}" | sort -u)

say "üëÄ Fetching all the Volume Attachment data on the cluster..."
ATTACHMENT_DATA="$(kubectl get "${ATTACHMENT_RESOURCE}" -o json)"

WAITABLE=()
(( BROKEN=0 )) || true
for PVC in "${PVCS[@]}" ; do

	PVC_INFO="$(jq -r ".items[] | select(.metadata.name == \"${PVC}\")" <<< "${PVC_DATA}")"

	PV="$(jq -r ".spec.volumeName" <<< "${PVC_INFO}")"
	PV_INFO="$(jq -r ".items[] | select(.metadata.name == \"${PV}\")" <<< "${PV_DATA}")"
	if [ -z "${PV}" ] || [ -z "${PV_INFO}" ] ; then
		err "No volume ${PV} found ... referenced by PVC ${PVC}"
		continue
	fi

	# For each PVC, identify the pod(s) it's attached to
	readarray -t ATTACHMENTS < <(jq -r ".items[] | select(.spec.source.persistentVolumeName == \"${PV}\") | .metadata.name" <<< "${ATTACHMENT_DATA}")

	[ "${#ATTACHMENTS[@]}" -gt 0 ] || continue

	say "üëÄ Found ${#ATTACHMENTS[@]} attachments for ${PVC} (${PV})"

	for ATTACHMENT in "${ATTACHMENTS[@]}" ; do
		ATTACHMENT_INFO="$(jq -r ".items[] | select(.metadata.name == \"${ATTACHMENT}\")" <<< "${ATTACHMENT_DATA}")"
		NODE="$(jq -r '.spec.nodeName' <<< "${ATTACHMENT_INFO}")"

		NODE_INFO="$(jq -r ".items[] | select(.metadata.name == \"${NODE}\")" <<< "${NODE_DATA}")"

		ATTACHMENT_REF="${PVC}/${PV}/${ATTACHMENT}/${NODE}"
		if is_attachment_valid "${ATTACHMENT}" "${PVC_INFO}" "${PV_INFO}" "${ATTACHMENT_INFO}" "${NODE_INFO}" ; then
			WAITABLE+=("${ATTACHMENT}")
		else
			(( ++BROKEN ))
		fi
	done
done

[ ${BROKEN} -le 0 ] || warn "Found ${BROKEN} attachments seem to be broken and will not be waited on (you can try to clear them manually)"

if [ "${#WAITABLE[@]}" -le 0 ] ; then
	ok "There were no waitable attachments found"
	exit 0
fi

say "üí§ Will wait up to ${ATTACHMENT_WAIT_TIMEOUT_STR} for ${#WAITABLE[@]} live attachments to disappear"
execute kubectl wait "${ATTACHMENT_RESOURCE}" "${WAITABLE[@]}" --for=delete --timeout="${ATTACHMENT_WAIT_TIMEOUT_STR}" || \
	fail "Timed out (or interrupted?) waiting for the attachments to clear"

ok "All waitable attachments have been removed"
exit 0
