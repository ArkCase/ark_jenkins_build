#!/bin/bash

set -euo pipefail

ATTACHMENT_RESOURCE="volumeattachments.storage.k8s.io"

[ -v CLEANUP_TIMEOUT ] || CLEANUP_TIMEOUT=""
[ -n "${CLEANUP_TIMEOUT}" ] || CLEANUP_TIMEOUT="5m"

[ -v DISABLE_CLEANUP ] || DISABLE_CLEANUP=""
case "${DISABLE_CLEANUP,,}" in
	true | t | yes | y ) DISABLE_CLEANUP="true" ;;
	* ) DISABLE_CLEANUP="false" ;;
esac
export DISABLE_CLEANUP

[ -v FORCE_CLEANUP ] || FORCE_CLEANUP=""
case "${FORCE_CLEANUP,,}" in
	true | t | yes | y | on | en | enable | enabled | active ) FORCE_CLEANUP="true" ;;
	* ) FORCE_CLEANUP="false" ;;
esac

timestamp()
{
	/usr/bin/date -Ins
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "‚úÖ ${@}"
}

warn()
{
	say "‚ö†Ô∏è ${@}"
}

err()
{
	say "‚ùå ${@}" 1>&2
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_valid_name()
{
	local NAME="${1}"
	[[ "${NAME}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]] || return 1
	return 0
}

execute()
{
	#
	# Show the command about to be executed
	#
	say "${@@Q}"
	if "${DISABLE_CLEANUP}" ; then
		warn "Cleanup disabled: skipping the command execution"
		return 0
	fi

	#
	# Proceed with the execution
	#
	( exec "${@}" )
	return ${?}
}

#
# This function returns the number that serves as
# a multiplier/divisor for a given time scale
#
get_time_mul()
{
	local TAG="${1^^}"

	[[ "${TAG}" =~ ^[HDMS]$ ]] || return 1
	local DURATION_S=1
	local DURATION_M=$(( DURATION_S * 60 ))
	local DURATION_H=$(( DURATION_M * 60 ))
	local DURATION_D=$(( DURATION_H * 24 ))

	local VAR="DURATION_${TAG}"
	echo -n "${!VAR}"
}

#
# This function converts numbers of seconds into
# K8s timespecs, but leaves timespec strings alone
#
secs_to_timestr()
{
	local STR="${1}"
	local NUM="(0|[1-9][0-9]*)"

	[ -n "${STR}" ] || return 1

	# If it's already a time string, return it
	if [[ "${STR^^}" =~ ^(${NUM}D)?(${NUM}H)?(${NUM}M)?(${NUM}S)?$ ]] ; then
		echo -n "${STR,,}"
		return 0
	fi

	[[ "${STR}" =~ ^${NUM}$ ]] || return 1

	local RET=""
	local SIZE=0
	local MUL=0
	local SECS=${STR}
	for C in D H M S ; do
		MUL=$(get_time_mul "${C}")
		(( SIZE = ( SECS / MUL ) ))
		[ ${SIZE} -gt 0 ] && RET+="${SIZE}${C}"
		(( SECS -= ( SIZE * MUL ) ))
	done

	echo -n ${RET,,}
	return 0
}

#
# This function converts K8s timespecs into
# numbers of seconds, but leaves numbers alone
#
timestr_to_secs()
{
	local STR="${1}"
	local NUM="(0|[1-9][0-9]*)"

	# If it's a straight-up number,
	# seconds already, so just return it
	if [[ "${STR}" =~ ^${NUM}$ ]] ; then
		echo -e "${STR}"
		return 0
	fi

	# It could be a time string, so parse it out
	[ -n "${STR}" ] || return 1
	[[ "${STR^^}" =~ ^(${NUM}D)?(${NUM}H)?(${NUM}M)?(${NUM}S)?$ ]] || return 1

	local PARTS=( "${BASH_REMATCH[@]:1}" )
	[ ${#PARTS[@]} -ge 1 ] || return 1

	local SIZE=0
	local MUL=0
	local SECS=0
	for (( i = 0 ; i < ${#PARTS[@]} ; i++ )) ; do
		[[ "${PARTS[i]}" =~ ^${NUM}([DHMS])$ ]] || continue
		SIZE=${BASH_REMATCH[1]}
		MUL=$(get_time_mul "${BASH_REMATCH[2]}")
		(( SECS += SIZE * MUL ))
	done

	echo -n ${SECS}
	return 0
}

is_attachment_valid()
{
	local ATTACHMENT_INFO="${1}"

	local ATTACHED=""
	local NODE=""

	read ATTACHED NODE < <("${JQ}" -r '(.status.attached | tostring) + " " + .spec.nodeName' <<< "${ATTACHMENT_INFO}")
	if [ -z "${ATTACHED}" ] || [ -z "${NODE}" ] ; then
		# No node info?!?
		say "\t‚ùå the attachment [${ATTACHMENT}] has no node information... deleting"
		return 1
	fi

	# TODO: Validate that the node exists....
	if ! "${KUBECTL}" get node "${NODE}" &>/dev/null ; then
		say "\t‚ùå ${ATTACHMENT} -> ${NODE} is missing"
		return 1
	fi

	# Node is OK ... do we want to try to hunt down the pod(s) that it's attached to?
	# If those pods are down, perhaps this attachment can be deleted?
	say "\t‚úÖ ${ATTACHMENT} üîó ${NODE}"
	return 0
}

usage()
{
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} [namespace] release"
	exit 1
}

KUBECTL="$(type -P kubectl)" || fail "Could not find 'kubectl' in the path"
EGREP="$(type -P egrep)" || fail "Could not find 'egrep' in the path"
JQ="$(type -P jq)" || fail "Could not find 'jq' in the path"
AWK="$(type -P awk)" || fail "Could not find 'awk' in the path"
SED="$(type -P sed)" || fail "Could not find 'sed' in the path"
SORT="$(type -P sort)" || fail "Could not find 'sort' in the path"
TIMEOUT="$(type -P timeout)" || fail "Could not find 'timeout' in the path"

[ ${#} -ge 1 ] && [ ${#} -le 2 ] || usage

CLEANUP_TIMEOUT=$(timestr_to_secs "${CLEANUP_TIMEOUT}") || fail "Invalid value for CLEANUP_TIMEOUT: [${CLEANUP_TIMEOUT}]"

if [ ${#} -eq 2 ] ; then
	NAMESPACE="${1}"
	shift
elif [ ! -v NAMESPACE ] ; then
	NAMESPACE="$("${KUBECTL}" config view --minify -o jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
fi
is_valid_name "${NAMESPACE}" || fail "The NAMESPACE value [${NAMESPACE}] is not valid"

RELEASE="${1}"
is_valid_name "${RELEASE}" || fail "The RELEASE value [${RELEASE}] is not valid"

"${KUBECTL}" get namespace "${NAMESPACE}" &>/dev/null || fail "The namespace [${NAMESPACE}] does not exist"

# Get all the PVCs in the currently default namespace
say "üëâ Fetching all the PVC data on the namespace ${NAMESPACE} for release ${RELEASE}..."
PVC_DATA="$("${KUBECTL}" get --namespace "${NAMESPACE}" pvc --selector="app.kubernetes.io/instance=${RELEASE}" -o json)"
PVC_COUNT="$("${JQ}" -r ".items | length" <<< "${PVC_DATA}")"

ok "Found ${PVC_COUNT} PVCs"
[ ${PVC_COUNT} -gt 0 ] || exit 0

readarray -t PVCS < <("${JQ}" -r ".items[] | .metadata.name" <<< "${PVC_DATA}" | "${SORT}" -u)

ATTACHMENT_DATA="$("${KUBECTL}" get "${ATTACHMENT_RESOURCE}" -o json)"

BROKEN=()
GOOD=()
for PVC in "${PVCS[@]}" ; do

	if ! is_valid_name "${PVC}" ; then
		err "PVC name [${PVC}] is not valid"
		continue
	fi

	say "Scanning the for attachments to PVC ${PVC}..."

	PV="$("${JQ}" -r ".items[] | select(.metadata.name == \"${PVC}\") | .spec.volumeName" <<< "${PVC_DATA}")"
	if [ -z "${PV}" ] || ! "${KUBECTL}" get pv "${PV}" &>/dev/null ; then
		err "No volume ${PV} found ... referenced by PVC ${PVC}"
		continue
	fi

	# For each PVC, identify the pod(s) it's attached to
	readarray -t ATTACHMENTS < <("${JQ}" -r ".items[] | select(.spec.source.persistentVolumeName == \"${PV}\") | .metadata.name" <<< "${ATTACHMENT_DATA}")

	say "${PVC} - ${#ATTACHMENTS[@]} attachments found"
	[ "${#ATTACHMENTS[@]}" -ge 1 ] || continue

	for ATTACHMENT in "${ATTACHMENTS[@]}" ; do
		ATTACHMENT_INFO="$("${JQ}" -r ".items[] | select(.metadata.name == \"${ATTACHMENT}\")" <<< "${ATTACHMENT_DATA}")"

		if is_attachment_valid "${ATTACHMENT_INFO}" ; then
			GOOD+=("${PVC}/${PV}/${ATTACHMENT}/${NODE}")
			continue
		fi

		NODE="$("${JQ}" -r '.spec.nodeName' <<< "${ATTACHMENT_INFO}")"

		BROKEN+=("${PVC}/${PV}/${ATTACHMENT}/${NODE}")
	done
done

if "${FORCE_CLEANUP}" && [ ${#GOOD[@]} -gt 0 ] ; then
	warn "Forced deletion is activated! All attachments found will be deleted!"
	say "üëâ Found ${#GOOD[@]} good attachments that needed deleting..."
	ARGS=()
	for INFO in "${GOOD[@]}" ; do
		IFS="/" read PVC PV ATTACHMENT NODE <<< "${INFO}"
		say "\t${PVC} -> ${PV} -> ${ATTACHMENT} -> ${NODE}"
		ARGS+=("${ATTACHMENT}")
	done

	RC=0
	execute "${TIMEOUT}" -k 30 ${CLEANUP_TIMEOUT} "${KUBECTL}" delete "${ATTACHMENT_RESOURCE}" "${ARGS[@]}" || RC=${?}
	if [ ${RC} -eq 0 ] ; then
		ok "Good attachment deletion complete"
	else
		case "${RC}" in
			124 )	say "\t‚åõ Good attachment deletion request timed out" ;;
			* )		say "\t‚ùå Good attachment deletion failed (${RC})" ;;
		esac
	fi
fi

if [ ${#BROKEN[@]} -eq 0 ] ; then
	ok "No broken attachments needed deletion!"
else
	say "üëâ Found ${#BROKEN[@]} broken attachments that needed deleting..."
	ARGS=()
	for INFO in "${BROKEN[@]}" ; do
		IFS="/" read PVC PV ATTACHMENT NODE <<< "${INFO}"
		say "\t${PVC} -> ${PV} -> ${ATTACHMENT} -> ${NODE}"
		ARGS+=("${ATTACHMENT}")
	done

	RC=0
	execute "${TIMEOUT}" -k 30 ${CLEANUP_TIMEOUT} "${KUBECTL}" delete "${ATTACHMENT_RESOURCE}" "${ARGS[@]}" || RC=${?}
	if [ ${RC} -eq 0 ] ; then
		ok "Broken attachment deletion complete"
	else
		case "${RC}" in
			124 )	say "\t‚åõ Broken attachment deletion request timed out" ;;
			* )		say "\t‚ùå Broken attachment deletion failed (${RC})" ;;
		esac
	fi
fi

exit 0
