#!/bin/bash

timestamp()
{
	/usr/bin/date -Ins
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "‚úÖ ${@}"
}

warn()
{
	say "‚ö†Ô∏è ${@}"
}

err()
{
	say "‚ùå ${@}" 1>&2
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_valid_name()
{
	local NAME="${1}"
	[[ "${NAME}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]] || return 1
	return 0
}

is_attachment_valid()
{
	local ATTACHMENT_INFO="${1}"

	local ATTACHED=""
	local NODE=""

	read ATTACHED NODE < <("${JQ}" -r '(.status.attached | tostring) + " " + .spec.nodeName' <<< "${ATTACHMENT_INFO}")
	if [ -z "${ATTACHED}" ] || [ -z "${NODE}" ] ; then
		# No node info?!?
		say "\t‚ùå the attachment [${ATTACHMENT}] has no node information... deleting"
		return 1
	fi

	# TODO: Validate that the node exists....
	if ! "${KUBECTL}" get node "${NODE}" &>/dev/null ; then
		say "\t‚ùå ${ATTACHMENT} -> ${NODE} is missing"
		return 1
	fi

	# Node is OK ... do we want to try to hunt down the pod(s) that it's attached to?
	# If those pods are down, perhaps this attachment can be deleted?
	say "\t‚úÖ ${ATTACHMENT} üîó ${NODE}"
	return 0
}

usage()
{
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} [namespace]"
	exit 1
}

KUBECTL="$(type -P kubectl)" || fail "Could not find 'kubectl' in the path"
EGREP="$(type -P egrep)" || fail "Could not find 'egrep' in the path"
JQ="$(type -P jq)" || fail "Could not find 'jq' in the path"
AWK="$(type -P awk)" || fail "Could not find 'awk' in the path"
SED="$(type -P sed)" || fail "Could not find 'sed' in the path"
SORT="$(type -P sort)" || fail "Could not find 'sort' in the path"
TIMEOUT="$(type -P timeout)" || fail "Could not find 'timeout' in the path"

[ ${#} -le 1 ] || usage

if [ ${#} -eq 1 ] ; then
	NAMESPACE="${1}"
elif [ ! -v NAMESPACE ] ; then
	NAMESPACE="$("${KUBECTL}" config view --minify -o jsonpath="{..namespace}")"
	[ -n "${NAMESPACE}" ] || NAMESPACE="default"
fi

is_valid_name "${NAMESPACE}" || fail "The NAMESPACE value [${NAMESPACE}] is not valid"
NSFLAG=(-n "${NAMESPACE}")

NODES="$("${KUBECTL}" get node -o name 2>/dev/null | "${SED}" -e 's;^[^/]\+/;;g' | "${SORT}" -u)"
[ -n "${NODES}" ] || fail "No cluster nodes found, cannot continue"

"${KUBECTL}" get namespace "${NAMESPACE}" &>/dev/null || fail "The namespace [${NAMESPACE}] does not exist"

# Get all the PVCs in the currently default namespace
say "üëâ Listing all the PVCs in the namespace ${NAMESPACE}..."
readarray -t ALL_PVC < <("${KUBECTL}" get "${NSFLAG[@]}" pvc -o name 2>/dev/null | "${SED}" -e 's;^[^/]\+/;;g' | "${SORT}" -u)
ok "Found ${#ALL_PVC[@]} PVCs"

ATTACHMENT_RESOURCE="volumeattachments.storage.k8s.io"

[ -v FORCE_DELETE ] || FORCE_DELETE=""
case "${FORCE_DELETE,,}" in
	true | t | yes | y | on | en | enable | enabled | active ) FORCE_DELETE="true" ;;
	* ) FORCE_DELETE="false" ;;
esac

"${FORCE_DELETE}" && warn "Forced deletion is activated! All attachments found will be deleted!"
for PVC in "${ALL_PVC[@]}" ; do

	if ! is_valid_name "${PVC}" ; then
		err "PVC name [${PVC}] is not valid"
		continue
	fi

	say "Scanning the for attachments to PVC ${PVC}..."

	if ! PV="$("${KUBECTL}" get pvc "${NSFLAG[@]}" "${PVC}" -o json | "${JQ}" -r '.spec.volumeName')" ; then
		err "No PVC [${PVC}] was found in the namespace ${NAMESPACE}"
		continue
	fi

	if [ -z "${PV}" ] || ! "${KUBECTL}" get pv "${PV}" &>/dev/null ; then
		err "No volume ${PV} found ... referenced by PVC ${PVC}"
		continue
	fi

	# For each PVC, identify the pod(s) it's attached to

	readarray -t ATTACHMENTS < <("${KUBECTL}" get "${ATTACHMENT_RESOURCE}" 2>/dev/null | "${EGREP}" "\s${PV}\s" | "${AWK}" '{ print $1 }')

	say "${PVC} - ${#ATTACHMENTS[@]} attachments found"
	[ "${#ATTACHMENTS[@]}" -ge 1 ] || continue

	for ATTACHMENT in "${ATTACHMENTS[@]}" ; do
		if ! ATTACHMENT_INFO="$("${KUBECTL}" get "${ATTACHMENT_RESOURCE}" "${ATTACHMENT}" -o json)" ; then
			say "\t‚ùå the attachment ${ATTACHMENT} disappeared (${?})"
			continue
		fi

		if ! "${FORCE_DELETE}" ; then
			is_attachment_valid "${ATTACHMENT_INFO}" && continue
		fi

		#
		# This attachment is not valid, for some reason, so kill it
		#
		RESULT="$("${TIMEOUT}" --k=15 10 "${KUBECTL}" delete "${ATTACHMENT_RESOURCE}" "${ATTACHMENT}" 2>&1)"
		RC=${?}
		if [ ${RC} -eq 0 ] ; then
			say "\t‚úÖ ${RESULT}"
		else
			case "${RC}" in
				124 )	say "\t‚åõ Deletion request timed out" ;;
				* )		say "\t‚ùå Deletion failed (${RC})" ;;
			esac
			say "\t‚ùå ${RESULT}"
		fi
	done
done
