#!/bin/bash

set -euo pipefail
. /.functions

ATTACHMENT_RESOURCE="volumeattachments.storage.k8s.io"

set_or_default CLEANUP_TIMEOUT "1m"
set_or_default CLEANUP_KILL_DELAY "5s"

set_as_boolean DISABLE_CLEANUP
export DISABLE_CLEANUP

set_as_boolean CLEANUP_ALL

set_as_boolean CLEANUP_FORCE

execute()
{
	execute_unless DISABLE_CLEANUP "${@}"
	return ${?}
}

is_attachment_valid()
{
	local ATTACHMENT="${1}"
	local ATTACHMENT_INFO="${2}"

	# Identify the node and PV that it's attached to
	local PV="$(jq -r ".spec.source.persistentVolumeName" <<< "${ATTACHMENT_INFO}")"
	local PV_INFO="$(jq -r ".items[] | select(.metadata.name == \"${PV}\")" <<< "${PV_ALL}")"

	if [ -z "${PV_INFO}" ] ; then
		say "\t❌ ${ATTACHMENT} 🔗 PV ${PV} is missing"
		return 1
	fi

	local NODE="$(jq -r ".spec.nodeName" <<< "${ATTACHMENT_INFO}")"
	local NODE_INFO="$(jq -r ".items[] | select(.metadata.name == \"${NODE}\")" <<< "${NODE_ALL}")"

	if [ -z "${NODE_INFO}" ] ; then
		say "\t❌ ${ATTACHMENT} 🔗 Node ${NODE} is missing"
		return 1
	fi

	read STATUS REST < <(jq -r '(.status.attached | tostring)' <<< "${ATTACHMENT_INFO}")
	if [ -n "${STATUS}" ] ; then
		say "\t✅ ${ATTACHMENT} 🔗 ${NODE}"
	else
		say "\t✅ the attachment [${ATTACHMENT}] is not attached"
	fi
	return 0
}

CLEANUP_TIMEOUT=$(timestr_to_secs "${CLEANUP_TIMEOUT}") || fail "Invalid value for CLEANUP_TIMEOUT: [${CLEANUP_TIMEOUT}]"
CLEANUP_KILL_DELAY=$(timestr_to_secs "${CLEANUP_KILL_DELAY}") || fail "Invalid value for CLEANUP_KILL_DELAY: [${CLEANUP_KILL_DELAY}]"

say "👉 Fetching all the Volume Attachment data on the cluster..."
ATTACHMENT_ALL="$(kubectl get "${ATTACHMENT_RESOURCE}" -o json)"
say "👉 Fetching all the PV data on cluster..."
PV_ALL="$(kubectl get pv -o json)"
say "👉 Fetching all the Node data on the cluster..."
NODE_ALL="$(kubectl get node -o json)"

ATTACHMENT_COUNT="$(jq -r ".items | length" <<< "${ATTACHMENT_ALL}")"

ok "Found ${ATTACHMENT_COUNT} instances of ${ATTACHMENT_RESOURCE}"
[ ${ATTACHMENT_COUNT} -gt 0 ] || exit 0

readarray -t ATTACHMENTS < <(jq -r ".items[] | .metadata.name" <<< "${ATTACHMENT_ALL}" | sort -u)

TARGETS=()
for ATTACHMENT in "${ATTACHMENTS[@]}" ; do
	ATTACHMENT_INFO="$(jq -r ".items[] | select(.metadata.name == \"${ATTACHMENT}\")" <<< "${ATTACHMENT_ALL}")"

	is_attachment_valid "${ATTACHMENT}" "${ATTACHMENT_INFO}" && continue

	PV="$(jq -r ".spec.source.persistentVolumeName" <<< "${ATTACHMENT_INFO}")"
	NODE="$(jq -r ".spec.nodeName" <<< "${ATTACHMENT_INFO}")"
	TARGETS+=("${ATTACHMENT}")
done

if [ ${#TARGETS[@]} -eq 0 ] ; then
	ok "No attachments needed deletion!"
	exit 0
fi

if as_boolean "${CLEANUP_FORCE}" ; then
	warn "Forced deletion is activated! Removing the finalizers"
	execute kubectl patch "${ATTACHMENT_RESOURCE}" -p '{"metadata":{"finalizers":null}}' --type=merge "${TARGETS[@]}"
	CLEANUP_FORCE=()
else
	CLEANUP_FORCE=(--grace-period=1)
fi

say "👉 Found ${#TARGETS[@]} attachments that needed deleting..."
RC=0
execute kubectl delete --ignore-not-found --wait=true "${CLEANUP_FORCE[@]}" "${ATTACHMENT_RESOURCE}" "${TARGETS[@]}"
if [ ${RC} -eq 0 ] ; then
	ok "Attachments deleted!"
else
	case "${RC}" in
		124 )	say "\t⌛ Deletion request timed out" ;;
		* )		say "\t❌ Deletion failed (${RC})" ;;
	esac
fi
exit 0
