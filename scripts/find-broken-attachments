#!/bin/bash

set -euo pipefail

ATTACHMENT_RESOURCE="volumeattachments.storage.k8s.io"

timestamp()
{
	/usr/bin/date -Ins
}

say()
{
	echo -e "$(timestamp): ${@}"
}

ok()
{
	say "‚úÖ ${@}"
}

warn()
{
	say "‚ö†Ô∏è ${@}"
}

err()
{
	say "‚ùå ${@}" 1>&2
}

fail()
{
	err "${@}"
	exit ${EXIT_CODE:-1}
}

is_valid_name()
{
	local NAME="${1}"
	[[ "${NAME}" =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$ ]] || return 1
	return 0
}

list_broken_items()
{
	local LABEL="${1}"
	shift
	local ITEMS=()
	readarray -t ITEMS < <(echo -en "${@}" | "${TR}" " " "\n" | "${SORT}" -u)
	set -- "${ITEMS[@]}"
	if [ ${#} -gt 0 ] ; then
		err "Found ${#} ${LABEL}:"
		echo -e "${@}" | "${TR}" " " "\n" | "${SED}" -e "s;^;\t;g"
	fi
	return 0
}

execute()
{
	#
	# Show the command about to be executed
	#
	say "${@@Q}"

	#
	# Proceed with the execution
	#
	( exec "${@}" )
	return ${?}
}

KUBECTL="$(type -P kubectl)" || fail "Could not find 'kubectl' in the path"
JQ="$(type -P jq)" || fail "Could not find 'jq' in the path"
SED="$(type -P sed)" || fail "Could not find 'sed' in the path"
SORT="$(type -P sort)" || fail "Could not find 'sort' in the path"
TR="$(type -P tr)" || fail "Could not find 'tr' in the path"

say "üëÄ Looking for any broken volume attachments..."

say "üëÄ Fetching all the Volume Attachment data on the cluster..."
ATTACHMENT_DATA="$("${KUBECTL}" get "${ATTACHMENT_RESOURCE}" -o json)"

readarray -t ATTACHMENTS < <("${JQ}" -r ".items[] | .metadata.name" <<< "${ATTACHMENT_DATA}" | "${SORT}" -u)
ATTACHMENT_COUNT=${#ATTACHMENTS[@]}
ok "Found ${ATTACHMENT_COUNT} volume attachments"
[ ${ATTACHMENT_COUNT} -gt 0 ] || exit 0

# Get all the PVCs in the currently default namespace
say "üëÄ Fetching all the Node data on the cluster..."
NODE_DATA="$("${KUBECTL}" get node -o json)"
say "üëÄ Fetching all the PV data on cluster..."
PV_DATA="$("${KUBECTL}" get pv -o json)"
say "üëÄ Fetching all the PVC data..."
PVC_DATA="$("${KUBECTL}" get pvc -A -o json)"

say "üëÄ Analyzing the attachments..."

FAILED=()
MISSING_NODE=()
MISSING_PV=()
PV_WITHOUT_PVC=()
MISSING_PVC=()
for ATTACHMENT in "${ATTACHMENTS[@]}" ; do
	ATTACHMENT_INFO="$("${JQ}" -r ".items[] | select(.metadata.name == \"${ATTACHMENT}\")" <<< "${ATTACHMENT_DATA}")"

	OK="true"

	# Find the node
	NODE="$("${JQ}" -r ".spec.nodeName" <<< "${ATTACHMENT_INFO}")"
	NODE_INFO="$("${JQ}" -r ".items[] | select(.metadata.name == \"${NODE}\")" <<< "${NODE_DATA}")"
	if [ -z "${NODE_INFO}" ] ; then
		MISSING_NODE+=("${NODE}")
		OK="false"
		NODE="‚ùå ${NODE}"
	fi

	# Find the volume
	PV="$("${JQ}" -r ".spec.source.persistentVolumeName" <<< "${ATTACHMENT_INFO}")"
	PV_INFO="$("${JQ}" -r ".items[] | select(.metadata.name == \"${PV}\")" <<< "${PV_DATA}")"

	# Find the PVC
	PVC=""
	if [ -n "${PV_INFO}" ] ; then
		PVC_INFO=""
		NAMESPACE=""
		CLAIM_REF="$("${JQ}" -r ".spec.claimRef" <<< "${PV_INFO}")"
		if [ -n "${CLAIM_REF}" ] ; then
			read NAMESPACE PVC < <("${JQ}" -r ".namespace + \" \" + .name" <<< "${CLAIM_REF}")
			PVC_INFO="$("${JQ}" -r ".items[] | select(.metadata.name == \"${PVC}\")" <<< "${PVC_DATA}")"
			PVC="${NAMESPACE}/${PVC}"
			if [ -z "${PVC_INFO}" ] ; then
				MISSING_PVC+=("${PVC}")
				OK="false"
				PVC="‚ùå ${PVC}"
			fi
		else
			PV_WITHOUT_PVC+=("${PV}")
			OK="false"
			PVC="‚ùå <no-pvc>"
		fi
	else
		MISSING_PV+=("${PV}")
		OK="false"
		PV="‚ùå ${PV}"
		PVC="‚ùå <no-pvc>"
	fi

	"${OK}" && continue

	say "\t${PVC} üîó ${PV} üîó ${ATTACHMENT} üîó ${NODE}"
	FAILED+=("${ATTACHMENT}")
done
if [ ${#FAILED[@]} -eq 0 ] ; then
	ok "No broken attachments were found!"
	exit 0
fi

list_broken_items "broken attachments" "${FAILED[@]}"
list_broken_items "missing PVCs" "${MISSING_PVC[@]}"
list_broken_items "PVs without a PVC" "${PV_WITHOUT_PVC[@]}"
list_broken_items "missing PVs" "${MISSING_PV[@]}"
list_broken_items "missing Nodes" "${MISSING_NODE[@]}"
exit 1
