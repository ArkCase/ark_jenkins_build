#!/bin/bash
SCRIPT="$(readlink -f "${BASH_SOURCE:-${0}}")"
BASEDIR="$(dirname "${SCRIPT}")"

set -euo pipefail
. /.functions

usage()
{
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} cluster-name"
	exit 1
}

[ ${#} -eq 1 ] || usage

#
# Make sure we're given a solid token
#
[ -v RANCHER_TOKEN ] || RANCHER_TOKEN=""
[ -n "${RANCHER_TOKEN}" ] || fail "Must provide a non-empty RANCHER_TOKEN value"
[[ "${RANCHER_TOKEN}" =~ ^[a-zA-Z0-9_-]+:.+$ ]] || fail "The RANCHER_TOKEN format is invalid"

#
# Allow for a configurable API endpoint, just in case...
#
[ -v RANCHER_API_URL ] || RANCHER_API_URL=""
[ -n "${RANCHER_API_URL}" ] || RANCHER_API_URL="https://rancher.armedia.com"

# Remove trailing slashes from the URL
[[ "${RANCHER_API_URL}" =~ ^(.*)/*$ ]] || fail "Invalid Rancher API URL [${RANCHER_API_URL}]"
RANCHER_API_ENDPOINT="${BASH_REMATCH[0]}/v3/clusters"

CLUSTER_NAME="${1}"
[ -n "${CLUSTER_NAME}" ] || fail "Must provide a non-empty cluster name"

CLUSTER_ID="$(curl -fsSL --config <(auth_params "${RANCHER_TOKEN}") "${RANCHER_API_ENDPOINT}" | jq -r ".data[] | select(.name == \"${CLUSTER_NAME}\") | .id")" || fail "Failed to query the cluster ID for [${CLUSTER_NAME}] (rc=${?})"
[ -n "${CLUSTER_ID}" ] || fail "No cluster ID was returned for [${CLUSTER_NAME}]"
echo "${CLUSTER_ID}"
exit 0
