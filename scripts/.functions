#!/bin/bash

timestamp() {
	date "+%Y/%m/%d %H:%M:%S"
}

say() {
	echo -e "$(timestamp): ${@}"
}

warn() {
	say "WARN - ${@}" 1>&2
}

err() {
	say "ERROR - ${@}" 1>&2
}

fail() {
	say "${@}" 1>&2
	exit ${EXIT_CODE:-1}
}

check_dir() {
	local DIR="${1}"
	[ -e "${DIR}" ] || return 1
	[ -d "${DIR}" ] || return 2
	[ -x "${DIR}" ] || return 3
	return 0
}

check_dir_readable() {
	local DIR="${1}"
	check_dir "${1}" || return ${?}
	[ -r "${DIR}" ] || return 4
	return 0
}

check_dir_writable() {
	local DIR="${1}"
	check_dir "${1}" || return ${?}
	[ -w "${DIR}" ] || return 5
	return 0
}

check_dir_readwrite() {
	local DIR="${1}"
	check_dir "${1}" || return ${?}
	[ -r "${DIR}" ] || return 4
	[ -w "${DIR}" ] || return 5
	return 0
}

check_file() {
	local FILE="${1}"
	[ -e "${FILE}" ] || return 1
	[ -f "${FILE}" ] || return 2
	return 0
}

check_file_readable() {
	local FILE="${1}"
	check_file "${1}" || return ${?}
	[ -r "${FILE}" ] || return 3
	return 0
}

check_file_writable() {
	local FILE="${1}"
	check_file "${1}" || return ${?}
	[ -w "${FILE}" ] || return 4
	return 0
}

check_file_readwrite() {
	local FILE="${1}"
	check_file "${1}" || return ${?}
	[ -r "${FILE}" ] || return 3
	[ -w "${FILE}" ] || return 4
	return 0
}

check_file_executable() {
	local FILE="${1}"
	check_file "${1}" || return ${?}
	[ -x "${FILE}" ] || return 5
	return 0
}

_check_tag_BETA() {
	local TAG="${1}"
	# The tag must be a number, with leading 0
	if ! [[ ${TAG} =~ ^[0-9]+$ ]] ; then
		echo "the tag should be a number"
		return 1
	fi
	return 0
}

_get_tag_BETA() {
	local TAG="${1}"

	# Make sure it has leading zeros
	[ ${TAG} -lt 10 ] && TAG="0${TAG}"

	echo -n "-beta-${TAG}"
	return 0
}

_get_tag_SNAPSHOT() {
	local TAG="${1}"
	echo -n "-SNAPSHOT-$(date -u +%Y%m%d-%H%M%S)"
	return 0
}

_get_tag_NIGHTLY() {
	# The tag is ignored ... we only care about a datestamp
	echo -n "-NIGHTLY-$(date -u +%Y%m%d)"
	return 0
}

_check_tag_MILESTONE() {
	local TAG="${1}"
	# The tag must be a number, with leading 0
	if ! [[ ${TAG} =~ ^[0-9]+$ ]] ; then
		echo "the tag should be a number"
		return 1
	fi
	return 0
}

_get_tag_MILESTONE() {
	local TAG="${1}"

	# Make sure it has leading zeros
	[ ${TAG} -lt 10 ] && TAG="0${TAG}"

	echo -n ".M.${TAG}"
	return 0
}

_check_tag_RC() {
	local TAG="${1}"
	# The tag must be a number, with leading 0
	if ! [[ ${TAG} =~ ^[0-9]+$ ]] ; then
		echo "the tag should be a number"
		return 1
	fi
	return 0
}

_get_tag_RC() {
	local TAG="${1}"

	# Make sure it has leading zeros
	[ ${TAG} -lt 10 ] && TAG="0${TAG}"

	echo -n ".RC-${TAG}"
	return 0
}

_get_tag_RELEASE() {
	echo -n ".RELEASE"
	return 0
}

is_type_valid() {
	local TYPE="${1^^}"

	[ -z "${TYPE}" ] && return 1

	local FUNC="_get_tag_${TYPE}"
	declare -F "${FUNC}" &>/dev/null && return 0
	return 1
}

is_tag_valid() {
	local TYPE="${1^^}"
	shift

	# Just in case ...
	if ! is_type_valid "${TYPE}" ; then
		echo -e "Type [${TYPE}] is not supported"
		return 1
	fi

	local FUNC="_check_tag_${TYPE}"
	declare -F "${FUNC}" &>/dev/null || return 0
	"${FUNC}" "${@}"
	return ${?}
}

get_build_tag() {
	local TYPE="${1^^}"
	shift

	is_tag_valid "${TYPE}" "${@}" || return ${?}

	local FUNC="_get_tag_${TYPE}"
	"${FUNC}" "${@}"
	local RC=${?}
	[ ${RC} -eq 0 ] && return 0
	return $(( 10 + RC ))
}

check_help_flag() {
	for n in "${@}" ; do
		case "${n}" in
			"-?" | "-h" | "--help" ) return 0 ;;
			* ) ;;
		esac
	done
	return 1
}

as_boolean() {
	local V="${1:-""}"

	# Is this a known true-equivalent string?
	case "${V,,}" in
		true | t | yes | y | enable | en | on ) return 0 ;;
	esac

	# Is it a non-zero number?
	[[ "${V}" =~ ^-?[1-9][0-9]*$ ]] && [ ${V} -ne 0 ] && return 0

	# Then this is certainly a false-value
	return 1
}

to_boolean() {
	local V="false"
	as_boolean "${@}" && V="true"
	echo -n "${V}"
	return 0
}
